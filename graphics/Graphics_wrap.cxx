/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./interfaces/Graphics.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__graphics_c1a031043095f7b7(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__graphics_c1a031043095f7b7(p);
}



#define SWIG_VERSION 0x040300
#define SWIGGO
#define SWIGMODULE graphics
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


 /* Includes the header in the wrapper code */
 #include <SFML/System.h>
 #include <SFML/Graphics.h>
 

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_graphics_c1a031043095f7b7(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_graphics_c1a031043095f7b7(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_sfVector2i_x_set_graphics_c1a031043095f7b7(sfVector2i *_swig_go_0, intgo _swig_go_1) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int arg2 ;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfVector2i_x_get_graphics_c1a031043095f7b7(sfVector2i *_swig_go_0) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  
  result = (int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector2i_y_set_graphics_c1a031043095f7b7(sfVector2i *_swig_go_0, intgo _swig_go_1) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int arg2 ;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfVector2i_y_get_graphics_c1a031043095f7b7(sfVector2i *_swig_go_0) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  
  result = (int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2i *_wrap_new_sfVector2i_graphics_c1a031043095f7b7() {
  sfVector2i *result = 0 ;
  sfVector2i *_swig_go_result;
  
  
  result = (sfVector2i *)new sfVector2i();
  *(sfVector2i **)&_swig_go_result = (sfVector2i *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector2i_graphics_c1a031043095f7b7(sfVector2i *_swig_go_0) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfVector2u_x_set_graphics_c1a031043095f7b7(sfVector2u *_swig_go_0, intgo _swig_go_1) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfVector2u_x_get_graphics_c1a031043095f7b7(sfVector2u *_swig_go_0) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector2u_y_set_graphics_c1a031043095f7b7(sfVector2u *_swig_go_0, intgo _swig_go_1) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfVector2u_y_get_graphics_c1a031043095f7b7(sfVector2u *_swig_go_0) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2u *_wrap_new_sfVector2u_graphics_c1a031043095f7b7() {
  sfVector2u *result = 0 ;
  sfVector2u *_swig_go_result;
  
  
  result = (sfVector2u *)new sfVector2u();
  *(sfVector2u **)&_swig_go_result = (sfVector2u *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector2u_graphics_c1a031043095f7b7(sfVector2u *_swig_go_0) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfVector2f_x_set_graphics_c1a031043095f7b7(sfVector2f *_swig_go_0, float _swig_go_1) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_sfVector2f_x_get_graphics_c1a031043095f7b7(sfVector2f *_swig_go_0) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector2f_y_set_graphics_c1a031043095f7b7(sfVector2f *_swig_go_0, float _swig_go_1) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_sfVector2f_y_get_graphics_c1a031043095f7b7(sfVector2f *_swig_go_0) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_new_sfVector2f_graphics_c1a031043095f7b7() {
  sfVector2f *result = 0 ;
  sfVector2f *_swig_go_result;
  
  
  result = (sfVector2f *)new sfVector2f();
  *(sfVector2f **)&_swig_go_result = (sfVector2f *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector2f_graphics_c1a031043095f7b7(sfVector2f *_swig_go_0) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfVector3f_x_set_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0, float _swig_go_1) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_sfVector3f_x_get_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector3f_y_set_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0, float _swig_go_1) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_sfVector3f_y_get_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector3f_z_set_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0, float _swig_go_1) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


float _wrap_sfVector3f_z_get_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  result = (float) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector3f *_wrap_new_sfVector3f_graphics_c1a031043095f7b7() {
  sfVector3f *result = 0 ;
  sfVector3f *_swig_go_result;
  
  
  result = (sfVector3f *)new sfVector3f();
  *(sfVector3f **)&_swig_go_result = (sfVector3f *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector3f_graphics_c1a031043095f7b7(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_sfBlendFactorZero_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorZero;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorOne_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorOne;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorSrcColor_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorSrcColor;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorOneMinusSrcColor_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorOneMinusSrcColor;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorDstColor_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorDstColor;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorOneMinusDstColor_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorOneMinusDstColor;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorSrcAlpha_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorSrcAlpha;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorOneMinusSrcAlpha_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorOneMinusSrcAlpha;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorDstAlpha_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorDstAlpha;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendFactorOneMinusDstAlpha_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendFactorOneMinusDstAlpha;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendEquationAdd_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendEquationAdd;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendEquationSubtract_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendEquationSubtract;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendEquationReverseSubtract_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendEquationReverseSubtract;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendEquationMin_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendEquationMin;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfBlendEquationMax_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfBlendEquationMax;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfBlendMode_colorSrcFactor_set_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0, intgo _swig_go_1) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor arg2 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  arg2 = (sfBlendFactor)_swig_go_1; 
  
  if (arg1) (arg1)->colorSrcFactor = arg2;
  
}


intgo _wrap_sfBlendMode_colorSrcFactor_get_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor result;
  intgo _swig_go_result;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  result = (sfBlendFactor) ((arg1)->colorSrcFactor);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfBlendMode_colorDstFactor_set_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0, intgo _swig_go_1) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor arg2 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  arg2 = (sfBlendFactor)_swig_go_1; 
  
  if (arg1) (arg1)->colorDstFactor = arg2;
  
}


intgo _wrap_sfBlendMode_colorDstFactor_get_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor result;
  intgo _swig_go_result;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  result = (sfBlendFactor) ((arg1)->colorDstFactor);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfBlendMode_colorEquation_set_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0, intgo _swig_go_1) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendEquation arg2 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  arg2 = (sfBlendEquation)_swig_go_1; 
  
  if (arg1) (arg1)->colorEquation = arg2;
  
}


intgo _wrap_sfBlendMode_colorEquation_get_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendEquation result;
  intgo _swig_go_result;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  result = (sfBlendEquation) ((arg1)->colorEquation);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfBlendMode_alphaSrcFactor_set_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0, intgo _swig_go_1) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor arg2 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  arg2 = (sfBlendFactor)_swig_go_1; 
  
  if (arg1) (arg1)->alphaSrcFactor = arg2;
  
}


intgo _wrap_sfBlendMode_alphaSrcFactor_get_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor result;
  intgo _swig_go_result;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  result = (sfBlendFactor) ((arg1)->alphaSrcFactor);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfBlendMode_alphaDstFactor_set_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0, intgo _swig_go_1) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor arg2 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  arg2 = (sfBlendFactor)_swig_go_1; 
  
  if (arg1) (arg1)->alphaDstFactor = arg2;
  
}


intgo _wrap_sfBlendMode_alphaDstFactor_get_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendFactor result;
  intgo _swig_go_result;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  result = (sfBlendFactor) ((arg1)->alphaDstFactor);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfBlendMode_alphaEquation_set_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0, intgo _swig_go_1) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendEquation arg2 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  arg2 = (sfBlendEquation)_swig_go_1; 
  
  if (arg1) (arg1)->alphaEquation = arg2;
  
}


intgo _wrap_sfBlendMode_alphaEquation_get_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  sfBlendEquation result;
  intgo _swig_go_result;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  result = (sfBlendEquation) ((arg1)->alphaEquation);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


sfBlendMode *_wrap_new_sfBlendMode_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)new sfBlendMode();
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfBlendMode_graphics_c1a031043095f7b7(sfBlendMode *_swig_go_0) {
  sfBlendMode *arg1 = (sfBlendMode *) 0 ;
  
  arg1 = *(sfBlendMode **)&_swig_go_0; 
  
  delete arg1;
  
}


sfBlendMode *_wrap_sfBlendAlpha_get_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)&sfBlendAlpha;
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


sfBlendMode *_wrap_sfBlendAdd_get_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)&sfBlendAdd;
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


sfBlendMode *_wrap_sfBlendMultiply_get_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)&sfBlendMultiply;
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


sfBlendMode *_wrap_sfBlendMin_get_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)&sfBlendMin;
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


sfBlendMode *_wrap_sfBlendMax_get_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)&sfBlendMax;
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


sfBlendMode *_wrap_sfBlendNone_get_graphics_c1a031043095f7b7() {
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  
  result = (sfBlendMode *)&sfBlendNone;
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


sfCircleShape *_wrap_sfCircleShape_create_graphics_c1a031043095f7b7() {
  sfCircleShape *result = 0 ;
  sfCircleShape *_swig_go_result;
  
  
  result = (sfCircleShape *)sfCircleShape_create();
  *(sfCircleShape **)&_swig_go_result = (sfCircleShape *)result; 
  return _swig_go_result;
}


sfCircleShape *_wrap_sfCircleShape_copy_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfCircleShape *result = 0 ;
  sfCircleShape *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = (sfCircleShape *)sfCircleShape_copy((sfCircleShape const *)arg1);
  *(sfCircleShape **)&_swig_go_result = (sfCircleShape *)result; 
  return _swig_go_result;
}


void _wrap_sfCircleShape_destroy_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  sfCircleShape_destroy(arg1);
  
}


void _wrap_sfCircleShape_setPosition_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfCircleShape_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfCircleShape_setRotation_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, float _swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfCircleShape_setRotation(arg1,arg2);
  
}


void _wrap_sfCircleShape_setScale_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfCircleShape_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfCircleShape_setOrigin_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfCircleShape_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfCircleShape_getPosition_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getPosition((sfCircleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfCircleShape_getRotation_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = (float)sfCircleShape_getRotation((sfCircleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfCircleShape_getScale_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getScale((sfCircleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfCircleShape_getOrigin_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getOrigin((sfCircleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfCircleShape_move_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfCircleShape_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfCircleShape_rotate_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, float _swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfCircleShape_rotate(arg1,arg2);
  
}


void _wrap_sfCircleShape_scale_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfCircleShape_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfCircleShape_getTransform_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getTransform((sfCircleShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfCircleShape_getInverseTransform_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getInverseTransform((sfCircleShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfCircleShape_setTexture_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfTexture *_swig_go_1, intgo _swig_go_2) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  sfBool arg3 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  arg3 = (sfBool)_swig_go_2; 
  
  sfCircleShape_setTexture(arg1,(sfTexture const *)arg2,arg3);
  
}


void _wrap_sfCircleShape_setTextureRect_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfIntRect *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfIntRect arg2 ;
  sfIntRect *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfIntRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfIntRect");
  }
  arg2 = (sfIntRect)*argp2;
  
  
  sfCircleShape_setTextureRect(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfCircleShape_setFillColor_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfColor *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfCircleShape_setFillColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfCircleShape_setOutlineColor_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, sfColor *_swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfCircleShape_setOutlineColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfCircleShape_setOutlineThickness_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, float _swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfCircleShape_setOutlineThickness(arg1,arg2);
  
}


sfTexture *_wrap_sfCircleShape_getTexture_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = (sfTexture *)sfCircleShape_getTexture((sfCircleShape const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfCircleShape_getTextureRect_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getTextureRect((sfCircleShape const *)arg1);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfCircleShape_getFillColor_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getFillColor((sfCircleShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfCircleShape_getOutlineColor_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getOutlineColor((sfCircleShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


float _wrap_sfCircleShape_getOutlineThickness_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = (float)sfCircleShape_getOutlineThickness((sfCircleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_sfCircleShape_getPointCount_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getPointCount((sfCircleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfCircleShape_getPoint_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, long long _swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  size_t arg2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = sfCircleShape_getPoint((sfCircleShape const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfCircleShape_setRadius_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, float _swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfCircleShape_setRadius(arg1,arg2);
  
}


float _wrap_sfCircleShape_getRadius_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = (float)sfCircleShape_getRadius((sfCircleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfCircleShape_setPointCount_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0, long long _swig_go_1) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  size_t arg2 ;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  sfCircleShape_setPointCount(arg1,SWIG_STD_MOVE(arg2));
  
}


sfFloatRect *_wrap_sfCircleShape_getLocalBounds_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getLocalBounds((sfCircleShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfCircleShape_getGlobalBounds_graphics_c1a031043095f7b7(sfCircleShape *_swig_go_0) {
  sfCircleShape *arg1 = (sfCircleShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfCircleShape **)&_swig_go_0; 
  
  result = sfCircleShape_getGlobalBounds((sfCircleShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


void _wrap_sfColor_r_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0, char _swig_go_1) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 arg2 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  arg2 = (sfUint8)_swig_go_1; 
  
  if (arg1) (arg1)->r = arg2;
  
}


char _wrap_sfColor_r_get_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 result;
  char _swig_go_result;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  result = (sfUint8) ((arg1)->r);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfColor_g_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0, char _swig_go_1) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 arg2 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  arg2 = (sfUint8)_swig_go_1; 
  
  if (arg1) (arg1)->g = arg2;
  
}


char _wrap_sfColor_g_get_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 result;
  char _swig_go_result;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  result = (sfUint8) ((arg1)->g);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfColor_b_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0, char _swig_go_1) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 arg2 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  arg2 = (sfUint8)_swig_go_1; 
  
  if (arg1) (arg1)->b = arg2;
  
}


char _wrap_sfColor_b_get_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 result;
  char _swig_go_result;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  result = (sfUint8) ((arg1)->b);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfColor_a_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0, char _swig_go_1) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 arg2 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  arg2 = (sfUint8)_swig_go_1; 
  
  if (arg1) (arg1)->a = arg2;
  
}


char _wrap_sfColor_a_get_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  sfUint8 result;
  char _swig_go_result;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  result = (sfUint8) ((arg1)->a);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfColor *_wrap_new_sfColor_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)new sfColor();
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfColor_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfBlack_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfBlack = *arg1;
  
}


sfColor *_wrap_sfBlack_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfBlack;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfWhite_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfWhite = *arg1;
  
}


sfColor *_wrap_sfWhite_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfWhite;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfRed_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfRed = *arg1;
  
}


sfColor *_wrap_sfRed_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfRed;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfGreen_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfGreen = *arg1;
  
}


sfColor *_wrap_sfGreen_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfGreen;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfBlue_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfBlue = *arg1;
  
}


sfColor *_wrap_sfBlue_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfBlue;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfYellow_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfYellow = *arg1;
  
}


sfColor *_wrap_sfYellow_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfYellow;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfMagenta_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfMagenta = *arg1;
  
}


sfColor *_wrap_sfMagenta_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfMagenta;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfCyan_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfCyan = *arg1;
  
}


sfColor *_wrap_sfCyan_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfCyan;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfTransparent_set_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor *arg1 = (sfColor *) 0 ;
  
  arg1 = *(sfColor **)&_swig_go_0; 
  
  sfTransparent = *arg1;
  
}


sfColor *_wrap_sfTransparent_get_graphics_c1a031043095f7b7() {
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  
  result = (sfColor *)&sfTransparent;
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


sfColor *_wrap_sfColor_fromRGB_graphics_c1a031043095f7b7(char _swig_go_0, char _swig_go_1, char _swig_go_2) {
  sfUint8 arg1 ;
  sfUint8 arg2 ;
  sfUint8 arg3 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = (sfUint8)_swig_go_0; 
  arg2 = (sfUint8)_swig_go_1; 
  arg3 = (sfUint8)_swig_go_2; 
  
  result = sfColor_fromRGB(arg1,arg2,arg3);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfColor_fromRGBA_graphics_c1a031043095f7b7(char _swig_go_0, char _swig_go_1, char _swig_go_2, char _swig_go_3) {
  sfUint8 arg1 ;
  sfUint8 arg2 ;
  sfUint8 arg3 ;
  sfUint8 arg4 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = (sfUint8)_swig_go_0; 
  arg2 = (sfUint8)_swig_go_1; 
  arg3 = (sfUint8)_swig_go_2; 
  arg4 = (sfUint8)_swig_go_3; 
  
  result = sfColor_fromRGBA(arg1,arg2,arg3,arg4);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfColor_fromInteger_graphics_c1a031043095f7b7(intgo _swig_go_0) {
  sfUint32 arg1 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = (sfUint32)_swig_go_0; 
  
  result = sfColor_fromInteger(arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


intgo _wrap_sfColor_toInteger_graphics_c1a031043095f7b7(sfColor *_swig_go_0) {
  sfColor arg1 ;
  sfColor *argp1 ;
  sfUint32 result;
  intgo _swig_go_result;
  
  
  argp1 = (sfColor *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg1 = (sfColor)*argp1;
  
  
  result = (sfUint32)sfColor_toInteger(SWIG_STD_MOVE(arg1));
  _swig_go_result = result; 
  return _swig_go_result;
}


sfColor *_wrap_sfColor_add_graphics_c1a031043095f7b7(sfColor *_swig_go_0, sfColor *_swig_go_1) {
  sfColor arg1 ;
  sfColor arg2 ;
  sfColor *argp1 ;
  sfColor *argp2 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  
  argp1 = (sfColor *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg1 = (sfColor)*argp1;
  
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  result = sfColor_add(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfColor_subtract_graphics_c1a031043095f7b7(sfColor *_swig_go_0, sfColor *_swig_go_1) {
  sfColor arg1 ;
  sfColor arg2 ;
  sfColor *argp1 ;
  sfColor *argp2 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  
  argp1 = (sfColor *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg1 = (sfColor)*argp1;
  
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  result = sfColor_subtract(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfColor_modulate_graphics_c1a031043095f7b7(sfColor *_swig_go_0, sfColor *_swig_go_1) {
  sfColor arg1 ;
  sfColor arg2 ;
  sfColor *argp1 ;
  sfColor *argp2 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  
  argp1 = (sfColor *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg1 = (sfColor)*argp1;
  
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  result = sfColor_modulate(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfConvexShape *_wrap_sfConvexShape_create_graphics_c1a031043095f7b7() {
  sfConvexShape *result = 0 ;
  sfConvexShape *_swig_go_result;
  
  
  result = (sfConvexShape *)sfConvexShape_create();
  *(sfConvexShape **)&_swig_go_result = (sfConvexShape *)result; 
  return _swig_go_result;
}


sfConvexShape *_wrap_sfConvexShape_copy_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfConvexShape *result = 0 ;
  sfConvexShape *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = (sfConvexShape *)sfConvexShape_copy((sfConvexShape const *)arg1);
  *(sfConvexShape **)&_swig_go_result = (sfConvexShape *)result; 
  return _swig_go_result;
}


void _wrap_sfConvexShape_destroy_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  sfConvexShape_destroy(arg1);
  
}


void _wrap_sfConvexShape_setPosition_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfConvexShape_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_setRotation_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, float _swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfConvexShape_setRotation(arg1,arg2);
  
}


void _wrap_sfConvexShape_setScale_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfConvexShape_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_setOrigin_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfConvexShape_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfConvexShape_getPosition_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getPosition((sfConvexShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfConvexShape_getRotation_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = (float)sfConvexShape_getRotation((sfConvexShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfConvexShape_getScale_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getScale((sfConvexShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfConvexShape_getOrigin_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getOrigin((sfConvexShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfConvexShape_move_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfConvexShape_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_rotate_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, float _swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfConvexShape_rotate(arg1,arg2);
  
}


void _wrap_sfConvexShape_scale_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfConvexShape_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfConvexShape_getTransform_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getTransform((sfConvexShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfConvexShape_getInverseTransform_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getInverseTransform((sfConvexShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfConvexShape_setTexture_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfTexture *_swig_go_1, intgo _swig_go_2) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  sfBool arg3 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  arg3 = (sfBool)_swig_go_2; 
  
  sfConvexShape_setTexture(arg1,(sfTexture const *)arg2,arg3);
  
}


void _wrap_sfConvexShape_setTextureRect_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfIntRect *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfIntRect arg2 ;
  sfIntRect *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfIntRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfIntRect");
  }
  arg2 = (sfIntRect)*argp2;
  
  
  sfConvexShape_setTextureRect(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_setFillColor_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfColor *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfConvexShape_setFillColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_setOutlineColor_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, sfColor *_swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfConvexShape_setOutlineColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_setOutlineThickness_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, float _swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfConvexShape_setOutlineThickness(arg1,arg2);
  
}


sfTexture *_wrap_sfConvexShape_getTexture_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = (sfTexture *)sfConvexShape_getTexture((sfConvexShape const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfConvexShape_getTextureRect_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getTextureRect((sfConvexShape const *)arg1);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfConvexShape_getFillColor_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getFillColor((sfConvexShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfConvexShape_getOutlineColor_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getOutlineColor((sfConvexShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


float _wrap_sfConvexShape_getOutlineThickness_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = (float)sfConvexShape_getOutlineThickness((sfConvexShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_sfConvexShape_getPointCount_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getPointCount((sfConvexShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfConvexShape_getPoint_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, long long _swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  size_t arg2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = sfConvexShape_getPoint((sfConvexShape const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfConvexShape_setPointCount_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, long long _swig_go_1) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  size_t arg2 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  sfConvexShape_setPointCount(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfConvexShape_setPoint_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0, long long _swig_go_1, sfVector2f *_swig_go_2) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  size_t arg2 ;
  sfVector2f arg3 ;
  sfVector2f *argp3 ;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  argp3 = (sfVector2f *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg3 = (sfVector2f)*argp3;
  
  
  sfConvexShape_setPoint(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  
}


sfFloatRect *_wrap_sfConvexShape_getLocalBounds_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getLocalBounds((sfConvexShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfConvexShape_getGlobalBounds_graphics_c1a031043095f7b7(sfConvexShape *_swig_go_0) {
  sfConvexShape *arg1 = (sfConvexShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfConvexShape **)&_swig_go_0; 
  
  result = sfConvexShape_getGlobalBounds((sfConvexShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFont *_wrap_sfFont_createFromFile_graphics_c1a031043095f7b7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  sfFont *result = 0 ;
  sfFont *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (sfFont *)sfFont_createFromFile((char const *)arg1);
  *(sfFont **)&_swig_go_result = (sfFont *)result; 
  free(arg1); 
  return _swig_go_result;
}


sfFont *_wrap_sfFont_createFromMemory_graphics_c1a031043095f7b7(void *_swig_go_0, long long _swig_go_1) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  sfFont *result = 0 ;
  sfFont *_swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = (sfFont *)sfFont_createFromMemory((void const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfFont **)&_swig_go_result = (sfFont *)result; 
  return _swig_go_result;
}


sfFont *_wrap_sfFont_createFromStream_graphics_c1a031043095f7b7(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfFont *result = 0 ;
  sfFont *_swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (sfFont *)sfFont_createFromStream(arg1);
  *(sfFont **)&_swig_go_result = (sfFont *)result; 
  return _swig_go_result;
}


sfFont *_wrap_sfFont_copy_graphics_c1a031043095f7b7(sfFont *_swig_go_0) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfFont *result = 0 ;
  sfFont *_swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  
  result = (sfFont *)sfFont_copy((sfFont const *)arg1);
  *(sfFont **)&_swig_go_result = (sfFont *)result; 
  return _swig_go_result;
}


void _wrap_sfFont_destroy_graphics_c1a031043095f7b7(sfFont *_swig_go_0) {
  sfFont *arg1 = (sfFont *) 0 ;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  
  sfFont_destroy(arg1);
  
}


sfGlyph *_wrap_sfFont_getGlyph_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfUint32 arg2 ;
  unsigned int arg3 ;
  sfBool arg4 ;
  float arg5 ;
  sfGlyph result;
  sfGlyph *_swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (sfUint32)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (sfBool)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  
  result = sfFont_getGlyph((sfFont const *)arg1,arg2,arg3,arg4,arg5);
  *(sfGlyph **)&_swig_go_result = new sfGlyph(result); 
  return _swig_go_result;
}


intgo _wrap_sfFont_hasGlyph_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfUint32 arg2 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (sfUint32)_swig_go_1; 
  
  result = (sfBool)sfFont_hasGlyph((sfFont const *)arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfFont_getKerning_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfUint32 arg2 ;
  sfUint32 arg3 ;
  unsigned int arg4 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (sfUint32)_swig_go_1; 
  arg3 = (sfUint32)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (float)sfFont_getKerning((sfFont const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfFont_getBoldKerning_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfUint32 arg2 ;
  sfUint32 arg3 ;
  unsigned int arg4 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (sfUint32)_swig_go_1; 
  arg3 = (sfUint32)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (float)sfFont_getBoldKerning((sfFont const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfFont_getLineSpacing_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1) {
  sfFont *arg1 = (sfFont *) 0 ;
  unsigned int arg2 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (float)sfFont_getLineSpacing((sfFont const *)arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfFont_getUnderlinePosition_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1) {
  sfFont *arg1 = (sfFont *) 0 ;
  unsigned int arg2 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (float)sfFont_getUnderlinePosition((sfFont const *)arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfFont_getUnderlineThickness_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1) {
  sfFont *arg1 = (sfFont *) 0 ;
  unsigned int arg2 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (float)sfFont_getUnderlineThickness((sfFont const *)arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfFont_getTexture_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1) {
  sfFont *arg1 = (sfFont *) 0 ;
  unsigned int arg2 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (sfTexture *)sfFont_getTexture(arg1,arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


void _wrap_sfFont_setSmooth_graphics_c1a031043095f7b7(sfFont *_swig_go_0, intgo _swig_go_1) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfFont_setSmooth(arg1,arg2);
  
}


intgo _wrap_sfFont_isSmooth_graphics_c1a031043095f7b7(sfFont *_swig_go_0) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  
  result = (sfBool)sfFont_isSmooth((sfFont const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfFontInfo *_wrap_sfFont_getInfo_graphics_c1a031043095f7b7(sfFont *_swig_go_0) {
  sfFont *arg1 = (sfFont *) 0 ;
  sfFontInfo result;
  sfFontInfo *_swig_go_result;
  
  arg1 = *(sfFont **)&_swig_go_0; 
  
  result = sfFont_getInfo((sfFont const *)arg1);
  *(sfFontInfo **)&_swig_go_result = new sfFontInfo(result); 
  return _swig_go_result;
}


void _wrap_sfFontInfo_family_set_graphics_c1a031043095f7b7(sfFontInfo *_swig_go_0, _gostring_ _swig_go_1) {
  sfFontInfo *arg1 = (sfFontInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(sfFontInfo **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->family = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->family, (const char *)arg2);
    } else {
      arg1->family = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_sfFontInfo_family_get_graphics_c1a031043095f7b7(sfFontInfo *_swig_go_0) {
  sfFontInfo *arg1 = (sfFontInfo *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(sfFontInfo **)&_swig_go_0; 
  
  result = (char *) ((arg1)->family);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


sfFontInfo *_wrap_new_sfFontInfo_graphics_c1a031043095f7b7() {
  sfFontInfo *result = 0 ;
  sfFontInfo *_swig_go_result;
  
  
  result = (sfFontInfo *)new sfFontInfo();
  *(sfFontInfo **)&_swig_go_result = (sfFontInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfFontInfo_graphics_c1a031043095f7b7(sfFontInfo *_swig_go_0) {
  sfFontInfo *arg1 = (sfFontInfo *) 0 ;
  
  arg1 = *(sfFontInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslBvec2_x_set_graphics_c1a031043095f7b7(sfGlslBvec2 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec2 *arg1 = (sfGlslBvec2 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec2 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfGlslBvec2_x_get_graphics_c1a031043095f7b7(sfGlslBvec2 *_swig_go_0) {
  sfGlslBvec2 *arg1 = (sfGlslBvec2 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec2 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslBvec2_y_set_graphics_c1a031043095f7b7(sfGlslBvec2 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec2 *arg1 = (sfGlslBvec2 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec2 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfGlslBvec2_y_get_graphics_c1a031043095f7b7(sfGlslBvec2 *_swig_go_0) {
  sfGlslBvec2 *arg1 = (sfGlslBvec2 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec2 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfGlslBvec2 *_wrap_new_sfGlslBvec2_graphics_c1a031043095f7b7() {
  sfGlslBvec2 *result = 0 ;
  sfGlslBvec2 *_swig_go_result;
  
  
  result = (sfGlslBvec2 *)new sfGlslBvec2();
  *(sfGlslBvec2 **)&_swig_go_result = (sfGlslBvec2 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslBvec2_graphics_c1a031043095f7b7(sfGlslBvec2 *_swig_go_0) {
  sfGlslBvec2 *arg1 = (sfGlslBvec2 *) 0 ;
  
  arg1 = *(sfGlslBvec2 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslIvec3_x_set_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfGlslIvec3_x_get_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  
  result = (int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslIvec3_y_set_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfGlslIvec3_y_get_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  
  result = (int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslIvec3_z_set_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


intgo _wrap_sfGlslIvec3_z_get_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  
  result = (int) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfGlslIvec3 *_wrap_new_sfGlslIvec3_graphics_c1a031043095f7b7() {
  sfGlslIvec3 *result = 0 ;
  sfGlslIvec3 *_swig_go_result;
  
  
  result = (sfGlslIvec3 *)new sfGlslIvec3();
  *(sfGlslIvec3 **)&_swig_go_result = (sfGlslIvec3 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslIvec3_graphics_c1a031043095f7b7(sfGlslIvec3 *_swig_go_0) {
  sfGlslIvec3 *arg1 = (sfGlslIvec3 *) 0 ;
  
  arg1 = *(sfGlslIvec3 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslBvec3_x_set_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfGlslBvec3_x_get_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslBvec3_y_set_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfGlslBvec3_y_get_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslBvec3_z_set_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


intgo _wrap_sfGlslBvec3_z_get_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfGlslBvec3 *_wrap_new_sfGlslBvec3_graphics_c1a031043095f7b7() {
  sfGlslBvec3 *result = 0 ;
  sfGlslBvec3 *_swig_go_result;
  
  
  result = (sfGlslBvec3 *)new sfGlslBvec3();
  *(sfGlslBvec3 **)&_swig_go_result = (sfGlslBvec3 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslBvec3_graphics_c1a031043095f7b7(sfGlslBvec3 *_swig_go_0) {
  sfGlslBvec3 *arg1 = (sfGlslBvec3 *) 0 ;
  
  arg1 = *(sfGlslBvec3 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslVec4_x_set_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0, float _swig_go_1) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float arg2 ;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_sfGlslVec4_x_get_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslVec4_y_set_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0, float _swig_go_1) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float arg2 ;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_sfGlslVec4_y_get_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslVec4_z_set_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0, float _swig_go_1) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float arg2 ;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


float _wrap_sfGlslVec4_z_get_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  
  result = (float) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslVec4_w_set_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0, float _swig_go_1) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float arg2 ;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->w = arg2;
  
}


float _wrap_sfGlslVec4_w_get_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  
  result = (float) ((arg1)->w);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfGlslVec4 *_wrap_new_sfGlslVec4_graphics_c1a031043095f7b7() {
  sfGlslVec4 *result = 0 ;
  sfGlslVec4 *_swig_go_result;
  
  
  result = (sfGlslVec4 *)new sfGlslVec4();
  *(sfGlslVec4 **)&_swig_go_result = (sfGlslVec4 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslVec4_graphics_c1a031043095f7b7(sfGlslVec4 *_swig_go_0) {
  sfGlslVec4 *arg1 = (sfGlslVec4 *) 0 ;
  
  arg1 = *(sfGlslVec4 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslIvec4_x_set_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfGlslIvec4_x_get_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  
  result = (int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslIvec4_y_set_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfGlslIvec4_y_get_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  
  result = (int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslIvec4_z_set_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


intgo _wrap_sfGlslIvec4_z_get_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  
  result = (int) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslIvec4_w_set_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int arg2 ;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->w = arg2;
  
}


intgo _wrap_sfGlslIvec4_w_get_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  
  result = (int) ((arg1)->w);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfGlslIvec4 *_wrap_new_sfGlslIvec4_graphics_c1a031043095f7b7() {
  sfGlslIvec4 *result = 0 ;
  sfGlslIvec4 *_swig_go_result;
  
  
  result = (sfGlslIvec4 *)new sfGlslIvec4();
  *(sfGlslIvec4 **)&_swig_go_result = (sfGlslIvec4 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslIvec4_graphics_c1a031043095f7b7(sfGlslIvec4 *_swig_go_0) {
  sfGlslIvec4 *arg1 = (sfGlslIvec4 *) 0 ;
  
  arg1 = *(sfGlslIvec4 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslBvec4_x_set_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfGlslBvec4_x_get_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslBvec4_y_set_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfGlslBvec4_y_get_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslBvec4_z_set_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


intgo _wrap_sfGlslBvec4_z_get_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlslBvec4_w_set_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0, intgo _swig_go_1) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  if (arg1) (arg1)->w = arg2;
  
}


intgo _wrap_sfGlslBvec4_w_get_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  
  result = (sfBool) ((arg1)->w);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfGlslBvec4 *_wrap_new_sfGlslBvec4_graphics_c1a031043095f7b7() {
  sfGlslBvec4 *result = 0 ;
  sfGlslBvec4 *_swig_go_result;
  
  
  result = (sfGlslBvec4 *)new sfGlslBvec4();
  *(sfGlslBvec4 **)&_swig_go_result = (sfGlslBvec4 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslBvec4_graphics_c1a031043095f7b7(sfGlslBvec4 *_swig_go_0) {
  sfGlslBvec4 *arg1 = (sfGlslBvec4 *) 0 ;
  
  arg1 = *(sfGlslBvec4 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslMat3_array_set_graphics_c1a031043095f7b7(sfGlslMat3 *_swig_go_0, float *_swig_go_1) {
  sfGlslMat3 *arg1 = (sfGlslMat3 *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = *(sfGlslMat3 **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  
  {
    size_t ii;
    float *b = (float *) arg1->array;
    for (ii = 0; ii < (size_t)3*3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


float *_wrap_sfGlslMat3_array_get_graphics_c1a031043095f7b7(sfGlslMat3 *_swig_go_0) {
  sfGlslMat3 *arg1 = (sfGlslMat3 *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;
  
  arg1 = *(sfGlslMat3 **)&_swig_go_0; 
  
  result = (float *)(float *) ((arg1)->array);
  *(float **)&_swig_go_result = result; 
  return _swig_go_result;
}


sfGlslMat3 *_wrap_new_sfGlslMat3_graphics_c1a031043095f7b7() {
  sfGlslMat3 *result = 0 ;
  sfGlslMat3 *_swig_go_result;
  
  
  result = (sfGlslMat3 *)new sfGlslMat3();
  *(sfGlslMat3 **)&_swig_go_result = (sfGlslMat3 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslMat3_graphics_c1a031043095f7b7(sfGlslMat3 *_swig_go_0) {
  sfGlslMat3 *arg1 = (sfGlslMat3 *) 0 ;
  
  arg1 = *(sfGlslMat3 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlslMat4_array_set_graphics_c1a031043095f7b7(sfGlslMat4 *_swig_go_0, float *_swig_go_1) {
  sfGlslMat4 *arg1 = (sfGlslMat4 *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = *(sfGlslMat4 **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  
  {
    size_t ii;
    float *b = (float *) arg1->array;
    for (ii = 0; ii < (size_t)4*4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


float *_wrap_sfGlslMat4_array_get_graphics_c1a031043095f7b7(sfGlslMat4 *_swig_go_0) {
  sfGlslMat4 *arg1 = (sfGlslMat4 *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;
  
  arg1 = *(sfGlslMat4 **)&_swig_go_0; 
  
  result = (float *)(float *) ((arg1)->array);
  *(float **)&_swig_go_result = result; 
  return _swig_go_result;
}


sfGlslMat4 *_wrap_new_sfGlslMat4_graphics_c1a031043095f7b7() {
  sfGlslMat4 *result = 0 ;
  sfGlslMat4 *_swig_go_result;
  
  
  result = (sfGlslMat4 *)new sfGlslMat4();
  *(sfGlslMat4 **)&_swig_go_result = (sfGlslMat4 *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlslMat4_graphics_c1a031043095f7b7(sfGlslMat4 *_swig_go_0) {
  sfGlslMat4 *arg1 = (sfGlslMat4 *) 0 ;
  
  arg1 = *(sfGlslMat4 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfGlyph_advance_set_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0, float _swig_go_1) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  float arg2 ;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->advance = arg2;
  
}


float _wrap_sfGlyph_advance_get_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  
  result = (float) ((arg1)->advance);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfGlyph_bounds_set_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0, sfFloatRect *_swig_go_1) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  sfFloatRect *arg2 = (sfFloatRect *) 0 ;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  arg2 = *(sfFloatRect **)&_swig_go_1; 
  
  if (arg1) (arg1)->bounds = *arg2;
  
}


sfFloatRect *_wrap_sfGlyph_bounds_get_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  sfFloatRect *result = 0 ;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  
  result = (sfFloatRect *)& ((arg1)->bounds);
  *(sfFloatRect **)&_swig_go_result = (sfFloatRect *)result; 
  return _swig_go_result;
}


void _wrap_sfGlyph_textureRect_set_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0, sfIntRect *_swig_go_1) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  if (arg1) (arg1)->textureRect = *arg2;
  
}


sfIntRect *_wrap_sfGlyph_textureRect_get_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  sfIntRect *result = 0 ;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  
  result = (sfIntRect *)& ((arg1)->textureRect);
  *(sfIntRect **)&_swig_go_result = (sfIntRect *)result; 
  return _swig_go_result;
}


sfGlyph *_wrap_new_sfGlyph_graphics_c1a031043095f7b7() {
  sfGlyph *result = 0 ;
  sfGlyph *_swig_go_result;
  
  
  result = (sfGlyph *)new sfGlyph();
  *(sfGlyph **)&_swig_go_result = (sfGlyph *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfGlyph_graphics_c1a031043095f7b7(sfGlyph *_swig_go_0) {
  sfGlyph *arg1 = (sfGlyph *) 0 ;
  
  arg1 = *(sfGlyph **)&_swig_go_0; 
  
  delete arg1;
  
}


sfImage *_wrap_sfImage_create_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (sfImage *)sfImage_create(arg1,arg2);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


sfImage *_wrap_sfImage_createFromColor_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1, sfColor *_swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  sfColor arg3 ;
  sfColor *argp3 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  argp3 = (sfColor *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg3 = (sfColor)*argp3;
  
  
  result = (sfImage *)sfImage_createFromColor(arg1,arg2,SWIG_STD_MOVE(arg3));
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


sfImage *_wrap_sfImage_createFromPixels_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1, char *_swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  sfUint8 *arg3 = (sfUint8 *) 0 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(sfUint8 **)&_swig_go_2; 
  
  result = (sfImage *)sfImage_createFromPixels(arg1,arg2,(unsigned char const *)arg3);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


sfImage *_wrap_sfImage_createFromFile_graphics_c1a031043095f7b7(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (sfImage *)sfImage_createFromFile((char const *)arg1);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  free(arg1); 
  return _swig_go_result;
}


sfImage *_wrap_sfImage_createFromMemory_graphics_c1a031043095f7b7(void *_swig_go_0, long long _swig_go_1) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = (sfImage *)sfImage_createFromMemory((void const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


sfImage *_wrap_sfImage_createFromStream_graphics_c1a031043095f7b7(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (sfImage *)sfImage_createFromStream(arg1);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


sfImage *_wrap_sfImage_copy_graphics_c1a031043095f7b7(sfImage *_swig_go_0) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  result = (sfImage *)sfImage_copy((sfImage const *)arg1);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


void _wrap_sfImage_destroy_graphics_c1a031043095f7b7(sfImage *_swig_go_0) {
  sfImage *arg1 = (sfImage *) 0 ;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  sfImage_destroy(arg1);
  
}


intgo _wrap_sfImage_saveToFile_graphics_c1a031043095f7b7(sfImage *_swig_go_0, _gostring_ _swig_go_1) {
  sfImage *arg1 = (sfImage *) 0 ;
  char *arg2 = (char *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (sfBool)sfImage_saveToFile((sfImage const *)arg1,(char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_sfImage_saveToMemory_graphics_c1a031043095f7b7(sfImage *_swig_go_0, sfBuffer *_swig_go_1, _gostring_ _swig_go_2) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfBuffer *arg2 = (sfBuffer *) 0 ;
  char *arg3 = (char *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  arg2 = *(sfBuffer **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (sfBool)sfImage_saveToMemory((sfImage const *)arg1,arg2,(char const *)arg3);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


sfVector2u *_wrap_sfImage_getSize_graphics_c1a031043095f7b7(sfImage *_swig_go_0) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfVector2u result;
  sfVector2u *_swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  result = sfImage_getSize((sfImage const *)arg1);
  *(sfVector2u **)&_swig_go_result = new sfVector2u(result); 
  return _swig_go_result;
}


void _wrap_sfImage_createMaskFromColor_graphics_c1a031043095f7b7(sfImage *_swig_go_0, sfColor *_swig_go_1, char _swig_go_2) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfColor arg2 ;
  sfUint8 arg3 ;
  sfColor *argp2 ;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  arg3 = (sfUint8)_swig_go_2; 
  
  sfImage_createMaskFromColor(arg1,SWIG_STD_MOVE(arg2),arg3);
  
}


void _wrap_sfImage_copyImage_graphics_c1a031043095f7b7(sfImage *_swig_go_0, sfImage *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, sfIntRect *_swig_go_4, intgo _swig_go_5) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfImage *arg2 = (sfImage *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  sfIntRect arg5 ;
  sfBool arg6 ;
  sfIntRect *argp5 ;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  arg2 = *(sfImage **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  argp5 = (sfIntRect *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null sfIntRect");
  }
  arg5 = (sfIntRect)*argp5;
  
  arg6 = (sfBool)_swig_go_5; 
  
  sfImage_copyImage(arg1,(sfImage const *)arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6);
  
}


void _wrap_sfImage_setPixel_graphics_c1a031043095f7b7(sfImage *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, sfColor *_swig_go_3) {
  sfImage *arg1 = (sfImage *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  sfColor arg4 ;
  sfColor *argp4 ;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  argp4 = (sfColor *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg4 = (sfColor)*argp4;
  
  
  sfImage_setPixel(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  
}


sfColor *_wrap_sfImage_getPixel_graphics_c1a031043095f7b7(sfImage *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  sfImage *arg1 = (sfImage *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  result = sfImage_getPixel((sfImage const *)arg1,arg2,arg3);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


char *_wrap_sfImage_getPixelsPtr_graphics_c1a031043095f7b7(sfImage *_swig_go_0) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfUint8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  result = (sfUint8 *)sfImage_getPixelsPtr((sfImage const *)arg1);
  *(sfUint8 **)&_swig_go_result = (sfUint8 *)result; 
  return _swig_go_result;
}


void _wrap_sfImage_flipHorizontally_graphics_c1a031043095f7b7(sfImage *_swig_go_0) {
  sfImage *arg1 = (sfImage *) 0 ;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  sfImage_flipHorizontally(arg1);
  
}


void _wrap_sfImage_flipVertically_graphics_c1a031043095f7b7(sfImage *_swig_go_0) {
  sfImage *arg1 = (sfImage *) 0 ;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  
  sfImage_flipVertically(arg1);
  
}


intgo _wrap_sfPoints_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfPoints;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfLines_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfLines;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfLineStrip_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfLineStrip;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTriangles_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTriangles;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTriangleStrip_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTriangleStrip;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTriangleFan_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTriangleFan;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfQuads_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfQuads;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfLinesStrip_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfLinesStrip;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTrianglesStrip_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTrianglesStrip;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTrianglesFan_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTrianglesFan;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfFloatRect_left_set_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0, float _swig_go_1) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float arg2 ;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->left = arg2;
  
}


float _wrap_sfFloatRect_left_get_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  result = (float) ((arg1)->left);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfFloatRect_top_set_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0, float _swig_go_1) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float arg2 ;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->top = arg2;
  
}


float _wrap_sfFloatRect_top_get_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  result = (float) ((arg1)->top);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfFloatRect_width_set_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0, float _swig_go_1) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float arg2 ;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->width = arg2;
  
}


float _wrap_sfFloatRect_width_get_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  result = (float) ((arg1)->width);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfFloatRect_height_set_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0, float _swig_go_1) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float arg2 ;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->height = arg2;
  
}


float _wrap_sfFloatRect_height_get_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  result = (float) ((arg1)->height);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfFloatRect *_wrap_new_sfFloatRect_graphics_c1a031043095f7b7() {
  sfFloatRect *result = 0 ;
  sfFloatRect *_swig_go_result;
  
  
  result = (sfFloatRect *)new sfFloatRect();
  *(sfFloatRect **)&_swig_go_result = (sfFloatRect *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfFloatRect_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfIntRect_left_set_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0, intgo _swig_go_1) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int arg2 ;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->left = arg2;
  
}


intgo _wrap_sfIntRect_left_get_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  result = (int) ((arg1)->left);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfIntRect_top_set_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0, intgo _swig_go_1) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int arg2 ;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->top = arg2;
  
}


intgo _wrap_sfIntRect_top_get_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  result = (int) ((arg1)->top);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfIntRect_width_set_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0, intgo _swig_go_1) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int arg2 ;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->width = arg2;
  
}


intgo _wrap_sfIntRect_width_get_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  result = (int) ((arg1)->width);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfIntRect_height_set_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0, intgo _swig_go_1) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int arg2 ;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->height = arg2;
  
}


intgo _wrap_sfIntRect_height_get_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  result = (int) ((arg1)->height);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfIntRect *_wrap_new_sfIntRect_graphics_c1a031043095f7b7() {
  sfIntRect *result = 0 ;
  sfIntRect *_swig_go_result;
  
  
  result = (sfIntRect *)new sfIntRect();
  *(sfIntRect **)&_swig_go_result = (sfIntRect *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfIntRect_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_sfFloatRect_contains_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0, float _swig_go_1, float _swig_go_2) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  float arg2 ;
  float arg3 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (sfBool)sfFloatRect_contains((sfFloatRect const *)arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfIntRect_contains_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  int arg2 ;
  int arg3 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (sfBool)sfIntRect_contains((sfIntRect const *)arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfFloatRect_intersects_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0, sfFloatRect *_swig_go_1, sfFloatRect *_swig_go_2) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  sfFloatRect *arg2 = (sfFloatRect *) 0 ;
  sfFloatRect *arg3 = (sfFloatRect *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  arg2 = *(sfFloatRect **)&_swig_go_1; 
  arg3 = *(sfFloatRect **)&_swig_go_2; 
  
  result = (sfBool)sfFloatRect_intersects((sfFloatRect const *)arg1,(sfFloatRect const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfIntRect_intersects_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0, sfIntRect *_swig_go_1, sfIntRect *_swig_go_2) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfIntRect *arg3 = (sfIntRect *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  arg2 = *(sfIntRect **)&_swig_go_1; 
  arg3 = *(sfIntRect **)&_swig_go_2; 
  
  result = (sfBool)sfIntRect_intersects((sfIntRect const *)arg1,(sfIntRect const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfFloatRect_getPosition_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  result = sfFloatRect_getPosition((sfFloatRect const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2i *_wrap_sfIntRect_getPosition_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  result = sfIntRect_getPosition((sfIntRect const *)arg1);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfFloatRect_getSize_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect *arg1 = (sfFloatRect *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfFloatRect **)&_swig_go_0; 
  
  result = sfFloatRect_getSize((sfFloatRect const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2i *_wrap_sfIntRect_getSize_graphics_c1a031043095f7b7(sfIntRect *_swig_go_0) {
  sfIntRect *arg1 = (sfIntRect *) 0 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = *(sfIntRect **)&_swig_go_0; 
  
  result = sfIntRect_getSize((sfIntRect const *)arg1);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


sfRectangleShape *_wrap_sfRectangleShape_create_graphics_c1a031043095f7b7() {
  sfRectangleShape *result = 0 ;
  sfRectangleShape *_swig_go_result;
  
  
  result = (sfRectangleShape *)sfRectangleShape_create();
  *(sfRectangleShape **)&_swig_go_result = (sfRectangleShape *)result; 
  return _swig_go_result;
}


sfRectangleShape *_wrap_sfRectangleShape_copy_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfRectangleShape *result = 0 ;
  sfRectangleShape *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = (sfRectangleShape *)sfRectangleShape_copy((sfRectangleShape const *)arg1);
  *(sfRectangleShape **)&_swig_go_result = (sfRectangleShape *)result; 
  return _swig_go_result;
}


void _wrap_sfRectangleShape_destroy_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  sfRectangleShape_destroy(arg1);
  
}


void _wrap_sfRectangleShape_setPosition_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfRectangleShape_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRectangleShape_setRotation_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, float _swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfRectangleShape_setRotation(arg1,arg2);
  
}


void _wrap_sfRectangleShape_setScale_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfRectangleShape_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRectangleShape_setOrigin_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfRectangleShape_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfRectangleShape_getPosition_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getPosition((sfRectangleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfRectangleShape_getRotation_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = (float)sfRectangleShape_getRotation((sfRectangleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfRectangleShape_getScale_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getScale((sfRectangleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfRectangleShape_getOrigin_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getOrigin((sfRectangleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfRectangleShape_move_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfRectangleShape_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRectangleShape_rotate_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, float _swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfRectangleShape_rotate(arg1,arg2);
  
}


void _wrap_sfRectangleShape_scale_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfRectangleShape_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfRectangleShape_getTransform_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getTransform((sfRectangleShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfRectangleShape_getInverseTransform_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getInverseTransform((sfRectangleShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfRectangleShape_setTexture_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfTexture *_swig_go_1, intgo _swig_go_2) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  sfBool arg3 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  arg3 = (sfBool)_swig_go_2; 
  
  sfRectangleShape_setTexture(arg1,(sfTexture const *)arg2,arg3);
  
}


void _wrap_sfRectangleShape_setTextureRect_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfIntRect *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfIntRect arg2 ;
  sfIntRect *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfIntRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfIntRect");
  }
  arg2 = (sfIntRect)*argp2;
  
  
  sfRectangleShape_setTextureRect(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRectangleShape_setFillColor_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfColor *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfRectangleShape_setFillColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRectangleShape_setOutlineColor_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfColor *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfRectangleShape_setOutlineColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRectangleShape_setOutlineThickness_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, float _swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfRectangleShape_setOutlineThickness(arg1,arg2);
  
}


sfTexture *_wrap_sfRectangleShape_getTexture_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = (sfTexture *)sfRectangleShape_getTexture((sfRectangleShape const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfRectangleShape_getTextureRect_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getTextureRect((sfRectangleShape const *)arg1);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfRectangleShape_getFillColor_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getFillColor((sfRectangleShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfRectangleShape_getOutlineColor_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getOutlineColor((sfRectangleShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


float _wrap_sfRectangleShape_getOutlineThickness_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = (float)sfRectangleShape_getOutlineThickness((sfRectangleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_sfRectangleShape_getPointCount_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getPointCount((sfRectangleShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfRectangleShape_getPoint_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, long long _swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  size_t arg2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = sfRectangleShape_getPoint((sfRectangleShape const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfRectangleShape_setSize_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfRectangleShape_setSize(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfRectangleShape_getSize_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getSize((sfRectangleShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfRectangleShape_getLocalBounds_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getLocalBounds((sfRectangleShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfRectangleShape_getGlobalBounds_graphics_c1a031043095f7b7(sfRectangleShape *_swig_go_0) {
  sfRectangleShape *arg1 = (sfRectangleShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfRectangleShape **)&_swig_go_0; 
  
  result = sfRectangleShape_getGlobalBounds((sfRectangleShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


void _wrap_sfRenderStates_blendMode_set_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0, sfBlendMode *_swig_go_1) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfBlendMode *arg2 = (sfBlendMode *) 0 ;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  arg2 = *(sfBlendMode **)&_swig_go_1; 
  
  if (arg1) (arg1)->blendMode = *arg2;
  
}


sfBlendMode *_wrap_sfRenderStates_blendMode_get_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfBlendMode *result = 0 ;
  sfBlendMode *_swig_go_result;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  
  result = (sfBlendMode *)& ((arg1)->blendMode);
  *(sfBlendMode **)&_swig_go_result = (sfBlendMode *)result; 
  return _swig_go_result;
}


void _wrap_sfRenderStates_transform_set_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0, sfTransform *_swig_go_1) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfTransform *arg2 = (sfTransform *) 0 ;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  arg2 = *(sfTransform **)&_swig_go_1; 
  
  if (arg1) (arg1)->transform = *arg2;
  
}


sfTransform *_wrap_sfRenderStates_transform_get_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfTransform *result = 0 ;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  
  result = (sfTransform *)& ((arg1)->transform);
  *(sfTransform **)&_swig_go_result = (sfTransform *)result; 
  return _swig_go_result;
}


void _wrap_sfRenderStates_texture_set_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0, sfTexture *_swig_go_1) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  
  if (arg1) (arg1)->texture = (sfTexture const *)arg2;
  
}


sfTexture *_wrap_sfRenderStates_texture_get_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  
  result = (sfTexture *) ((arg1)->texture);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


void _wrap_sfRenderStates_shader_set_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0, sfShader *_swig_go_1) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfShader *arg2 = (sfShader *) 0 ;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  arg2 = *(sfShader **)&_swig_go_1; 
  
  if (arg1) (arg1)->shader = (sfShader const *)arg2;
  
}


sfShader *_wrap_sfRenderStates_shader_get_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  sfShader *result = 0 ;
  sfShader *_swig_go_result;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  
  result = (sfShader *) ((arg1)->shader);
  *(sfShader **)&_swig_go_result = (sfShader *)result; 
  return _swig_go_result;
}


sfRenderStates *_wrap_new_sfRenderStates_graphics_c1a031043095f7b7() {
  sfRenderStates *result = 0 ;
  sfRenderStates *_swig_go_result;
  
  
  result = (sfRenderStates *)new sfRenderStates();
  *(sfRenderStates **)&_swig_go_result = (sfRenderStates *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfRenderStates_graphics_c1a031043095f7b7(sfRenderStates *_swig_go_0) {
  sfRenderStates *arg1 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderStates **)&_swig_go_0; 
  
  delete arg1;
  
}


sfRenderStates *_wrap_sfRenderStates_default_graphics_c1a031043095f7b7() {
  sfRenderStates result;
  sfRenderStates *_swig_go_result;
  
  
  result = sfRenderStates_default();
  *(sfRenderStates **)&_swig_go_result = new sfRenderStates(result); 
  return _swig_go_result;
}


sfRenderTexture *_wrap_sfRenderTexture_create_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  sfBool arg3 ;
  sfRenderTexture *result = 0 ;
  sfRenderTexture *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (sfBool)_swig_go_2; 
  
  result = (sfRenderTexture *)sfRenderTexture_create(arg1,arg2,arg3);
  *(sfRenderTexture **)&_swig_go_result = (sfRenderTexture *)result; 
  return _swig_go_result;
}


sfRenderTexture *_wrap_sfRenderTexture_createWithSettings_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1, sfContextSettings *_swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  sfContextSettings *arg3 = (sfContextSettings *) 0 ;
  sfRenderTexture *result = 0 ;
  sfRenderTexture *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(sfContextSettings **)&_swig_go_2; 
  
  result = (sfRenderTexture *)sfRenderTexture_createWithSettings(arg1,arg2,(sfContextSettings const *)arg3);
  *(sfRenderTexture **)&_swig_go_result = (sfRenderTexture *)result; 
  return _swig_go_result;
}


void _wrap_sfRenderTexture_destroy_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  sfRenderTexture_destroy(arg1);
  
}


sfVector2u *_wrap_sfRenderTexture_getSize_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVector2u result;
  sfVector2u *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = sfRenderTexture_getSize((sfRenderTexture const *)arg1);
  *(sfVector2u **)&_swig_go_result = new sfVector2u(result); 
  return _swig_go_result;
}


intgo _wrap_sfRenderTexture_isSrgb_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfBool)sfRenderTexture_isSrgb((sfRenderTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfRenderTexture_setActive_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, intgo _swig_go_1) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool arg2 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  result = (sfBool)sfRenderTexture_setActive(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfRenderTexture_display_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  sfRenderTexture_display(arg1);
  
}


void _wrap_sfRenderTexture_clear_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfColor *_swig_go_1) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfRenderTexture_clear(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRenderTexture_setView_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfView *_swig_go_1) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfView *arg2 = (sfView *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfView **)&_swig_go_1; 
  
  sfRenderTexture_setView(arg1,(sfView const *)arg2);
  
}


sfView *_wrap_sfRenderTexture_getView_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfView *)sfRenderTexture_getView((sfRenderTexture const *)arg1);
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


sfView *_wrap_sfRenderTexture_getDefaultView_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfView *)sfRenderTexture_getDefaultView((sfRenderTexture const *)arg1);
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfRenderTexture_getViewport_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfView *_swig_go_1) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfView *arg2 = (sfView *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfView **)&_swig_go_1; 
  
  result = sfRenderTexture_getViewport((sfRenderTexture const *)arg1,(sfView const *)arg2);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfRenderTexture_mapPixelToCoords_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfVector2i *_swig_go_1, sfView *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVector2i arg2 ;
  sfView *arg3 = (sfView *) 0 ;
  sfVector2i *argp2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  argp2 = (sfVector2i *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2i");
  }
  arg2 = (sfVector2i)*argp2;
  
  arg3 = *(sfView **)&_swig_go_2; 
  
  result = sfRenderTexture_mapPixelToCoords((sfRenderTexture const *)arg1,SWIG_STD_MOVE(arg2),(sfView const *)arg3);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2i *_wrap_sfRenderTexture_mapCoordsToPixel_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfVector2f *_swig_go_1, sfView *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVector2f arg2 ;
  sfView *arg3 = (sfView *) 0 ;
  sfVector2f *argp2 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  arg3 = *(sfView **)&_swig_go_2; 
  
  result = sfRenderTexture_mapCoordsToPixel((sfRenderTexture const *)arg1,SWIG_STD_MOVE(arg2),(sfView const *)arg3);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


void _wrap_sfRenderTexture_drawSprite_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfSprite *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfSprite *arg2 = (sfSprite *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfSprite **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawSprite(arg1,(sfSprite const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawText_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfText *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfText *arg2 = (sfText *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfText **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawText(arg1,(sfText const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawShape_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfShape *arg2 = (sfShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawShape(arg1,(sfShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawCircleShape_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfCircleShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfCircleShape *arg2 = (sfCircleShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfCircleShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawCircleShape(arg1,(sfCircleShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawConvexShape_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfConvexShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfConvexShape *arg2 = (sfConvexShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfConvexShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawConvexShape(arg1,(sfConvexShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawRectangleShape_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfRectangleShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfRectangleShape *arg2 = (sfRectangleShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfRectangleShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawRectangleShape(arg1,(sfRectangleShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawVertexArray_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfVertexArray *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVertexArray *arg2 = (sfVertexArray *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfVertexArray **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawVertexArray(arg1,(sfVertexArray const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawVertexBuffer_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfVertexBuffer *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVertexBuffer *arg2 = (sfVertexBuffer *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfVertexBuffer **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderTexture_drawVertexBuffer(arg1,(sfVertexBuffer const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderTexture_drawVertexBufferRange_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfVertexBuffer *_swig_go_1, long long _swig_go_2, long long _swig_go_3, sfRenderStates *_swig_go_4) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVertexBuffer *arg2 = (sfVertexBuffer *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  sfRenderStates *arg5 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfVertexBuffer **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  arg5 = *(sfRenderStates **)&_swig_go_4; 
  
  sfRenderTexture_drawVertexBufferRange(arg1,(sfVertexBuffer const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),(sfRenderStates const *)arg5);
  
}


void _wrap_sfRenderTexture_drawPrimitives_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, sfVertex *_swig_go_1, long long _swig_go_2, intgo _swig_go_3, sfRenderStates *_swig_go_4) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfVertex *arg2 = (sfVertex *) 0 ;
  size_t arg3 ;
  sfPrimitiveType arg4 ;
  sfRenderStates *arg5 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = *(sfVertex **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = (sfPrimitiveType)_swig_go_3; 
  arg5 = *(sfRenderStates **)&_swig_go_4; 
  
  sfRenderTexture_drawPrimitives(arg1,(sfVertex const *)arg2,SWIG_STD_MOVE(arg3),arg4,(sfRenderStates const *)arg5);
  
}


void _wrap_sfRenderTexture_pushGLStates_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  sfRenderTexture_pushGLStates(arg1);
  
}


void _wrap_sfRenderTexture_popGLStates_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  sfRenderTexture_popGLStates(arg1);
  
}


void _wrap_sfRenderTexture_resetGLStates_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  sfRenderTexture_resetGLStates(arg1);
  
}


sfTexture *_wrap_sfRenderTexture_getTexture_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfTexture *)sfRenderTexture_getTexture((sfRenderTexture const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


intgo _wrap_sfRenderTexture_getMaximumAntialiasingLevel_graphics_c1a031043095f7b7() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = (unsigned int)sfRenderTexture_getMaximumAntialiasingLevel();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfRenderTexture_setSmooth_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, intgo _swig_go_1) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderTexture_setSmooth(arg1,arg2);
  
}


intgo _wrap_sfRenderTexture_isSmooth_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfBool)sfRenderTexture_isSmooth((sfRenderTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfRenderTexture_setRepeated_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0, intgo _swig_go_1) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderTexture_setRepeated(arg1,arg2);
  
}


intgo _wrap_sfRenderTexture_isRepeated_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfBool)sfRenderTexture_isRepeated((sfRenderTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfRenderTexture_generateMipmap_graphics_c1a031043095f7b7(sfRenderTexture *_swig_go_0) {
  sfRenderTexture *arg1 = (sfRenderTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderTexture **)&_swig_go_0; 
  
  result = (sfBool)sfRenderTexture_generateMipmap(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfRenderWindow *_wrap_sfRenderWindow_create_graphics_c1a031043095f7b7(sfVideoMode *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, sfContextSettings *_swig_go_3) {
  sfVideoMode arg1 ;
  char *arg2 = (char *) 0 ;
  sfUint32 arg3 ;
  sfContextSettings *arg4 = (sfContextSettings *) 0 ;
  sfVideoMode *argp1 ;
  sfRenderWindow *result = 0 ;
  sfRenderWindow *_swig_go_result;
  
  
  argp1 = (sfVideoMode *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVideoMode");
  }
  arg1 = (sfVideoMode)*argp1;
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (sfUint32)_swig_go_2; 
  arg4 = *(sfContextSettings **)&_swig_go_3; 
  
  result = (sfRenderWindow *)sfRenderWindow_create(SWIG_STD_MOVE(arg1),(char const *)arg2,arg3,(sfContextSettings const *)arg4);
  *(sfRenderWindow **)&_swig_go_result = (sfRenderWindow *)result; 
  free(arg2); 
  return _swig_go_result;
}


sfRenderWindow *_wrap_sfRenderWindow_createUnicode_graphics_c1a031043095f7b7(sfVideoMode *_swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, sfContextSettings *_swig_go_3) {
  sfVideoMode arg1 ;
  sfUint32 *arg2 = (sfUint32 *) 0 ;
  sfUint32 arg3 ;
  sfContextSettings *arg4 = (sfContextSettings *) 0 ;
  sfVideoMode *argp1 ;
  sfRenderWindow *result = 0 ;
  sfRenderWindow *_swig_go_result;
  
  
  argp1 = (sfVideoMode *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVideoMode");
  }
  arg1 = (sfVideoMode)*argp1;
  
  arg2 = *(sfUint32 **)&_swig_go_1; 
  arg3 = (sfUint32)_swig_go_2; 
  arg4 = *(sfContextSettings **)&_swig_go_3; 
  
  result = (sfRenderWindow *)sfRenderWindow_createUnicode(SWIG_STD_MOVE(arg1),(unsigned int const *)arg2,arg3,(sfContextSettings const *)arg4);
  *(sfRenderWindow **)&_swig_go_result = (sfRenderWindow *)result; 
  return _swig_go_result;
}


sfRenderWindow *_wrap_sfRenderWindow_createFromHandle_graphics_c1a031043095f7b7(sfWindowHandle *_swig_go_0, sfContextSettings *_swig_go_1) {
  sfWindowHandle arg1 ;
  sfContextSettings *arg2 = (sfContextSettings *) 0 ;
  sfWindowHandle *argp1 ;
  sfRenderWindow *result = 0 ;
  sfRenderWindow *_swig_go_result;
  
  
  argp1 = (sfWindowHandle *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfWindowHandle");
  }
  arg1 = (sfWindowHandle)*argp1;
  
  arg2 = *(sfContextSettings **)&_swig_go_1; 
  
  result = (sfRenderWindow *)sfRenderWindow_createFromHandle(SWIG_STD_MOVE(arg1),(sfContextSettings const *)arg2);
  *(sfRenderWindow **)&_swig_go_result = (sfRenderWindow *)result; 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_destroy_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_destroy(arg1);
  
}


void _wrap_sfRenderWindow_close_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_close(arg1);
  
}


intgo _wrap_sfRenderWindow_isOpen_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = (sfBool)sfRenderWindow_isOpen((sfRenderWindow const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfContextSettings *_wrap_sfRenderWindow_getSettings_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfContextSettings result;
  sfContextSettings *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = sfRenderWindow_getSettings((sfRenderWindow const *)arg1);
  *(sfContextSettings **)&_swig_go_result = new sfContextSettings(result); 
  return _swig_go_result;
}


intgo _wrap_sfRenderWindow_pollEvent_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfEvent *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfEvent *arg2 = (sfEvent *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfEvent **)&_swig_go_1; 
  
  result = (sfBool)sfRenderWindow_pollEvent(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfRenderWindow_waitEvent_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfEvent *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfEvent *arg2 = (sfEvent *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfEvent **)&_swig_go_1; 
  
  result = (sfBool)sfRenderWindow_waitEvent(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2i *_wrap_sfRenderWindow_getPosition_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = sfRenderWindow_getPosition((sfRenderWindow const *)arg1);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_setPosition_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVector2i *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2i arg2 ;
  sfVector2i *argp2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  argp2 = (sfVector2i *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2i");
  }
  arg2 = (sfVector2i)*argp2;
  
  
  sfRenderWindow_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2u *_wrap_sfRenderWindow_getSize_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2u result;
  sfVector2u *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = sfRenderWindow_getSize((sfRenderWindow const *)arg1);
  *(sfVector2u **)&_swig_go_result = new sfVector2u(result); 
  return _swig_go_result;
}


intgo _wrap_sfRenderWindow_isSrgb_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = (sfBool)sfRenderWindow_isSrgb((sfRenderWindow const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_setSize_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVector2u *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2u arg2 ;
  sfVector2u *argp2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  argp2 = (sfVector2u *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2u");
  }
  arg2 = (sfVector2u)*argp2;
  
  
  sfRenderWindow_setSize(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRenderWindow_setTitle_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, _gostring_ _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  sfRenderWindow_setTitle(arg1,(char const *)arg2);
  
  free(arg2); 
}


void _wrap_sfRenderWindow_setUnicodeTitle_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfUint32 *arg2 = (sfUint32 *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfUint32 **)&_swig_go_1; 
  
  sfRenderWindow_setUnicodeTitle(arg1,(unsigned int const *)arg2);
  
}


void _wrap_sfRenderWindow_setIcon_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, char *_swig_go_3) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  sfUint8 *arg4 = (sfUint8 *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = *(sfUint8 **)&_swig_go_3; 
  
  sfRenderWindow_setIcon(arg1,arg2,arg3,(unsigned char const *)arg4);
  
}


void _wrap_sfRenderWindow_setVisible_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderWindow_setVisible(arg1,arg2);
  
}


void _wrap_sfRenderWindow_setVerticalSyncEnabled_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderWindow_setVerticalSyncEnabled(arg1,arg2);
  
}


void _wrap_sfRenderWindow_setMouseCursorVisible_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderWindow_setMouseCursorVisible(arg1,arg2);
  
}


void _wrap_sfRenderWindow_setMouseCursorGrabbed_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderWindow_setMouseCursorGrabbed(arg1,arg2);
  
}


void _wrap_sfRenderWindow_setMouseCursor_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfCursor *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfCursor *arg2 = (sfCursor *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfCursor **)&_swig_go_1; 
  
  sfRenderWindow_setMouseCursor(arg1,(sfCursor const *)arg2);
  
}


void _wrap_sfRenderWindow_setKeyRepeatEnabled_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfRenderWindow_setKeyRepeatEnabled(arg1,arg2);
  
}


void _wrap_sfRenderWindow_setFramerateLimit_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  sfRenderWindow_setFramerateLimit(arg1,arg2);
  
}


void _wrap_sfRenderWindow_setJoystickThreshold_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, float _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  float arg2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfRenderWindow_setJoystickThreshold(arg1,arg2);
  
}


intgo _wrap_sfRenderWindow_setActive_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, intgo _swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool arg2 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  result = (sfBool)sfRenderWindow_setActive(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_requestFocus_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_requestFocus(arg1);
  
}


intgo _wrap_sfRenderWindow_hasFocus_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = (sfBool)sfRenderWindow_hasFocus((sfRenderWindow const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_display_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_display(arg1);
  
}


sfWindowHandle *_wrap_sfRenderWindow_getSystemHandle_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfWindowHandle result;
  sfWindowHandle *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = sfRenderWindow_getSystemHandle((sfRenderWindow const *)arg1);
  *(sfWindowHandle **)&_swig_go_result = new sfWindowHandle(result); 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_clear_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfColor *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfRenderWindow_clear(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfRenderWindow_setView_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfView *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfView *arg2 = (sfView *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfView **)&_swig_go_1; 
  
  sfRenderWindow_setView(arg1,(sfView const *)arg2);
  
}


sfView *_wrap_sfRenderWindow_getView_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = (sfView *)sfRenderWindow_getView((sfRenderWindow const *)arg1);
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


sfView *_wrap_sfRenderWindow_getDefaultView_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = (sfView *)sfRenderWindow_getDefaultView((sfRenderWindow const *)arg1);
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfRenderWindow_getViewport_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfView *_swig_go_1) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfView *arg2 = (sfView *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfView **)&_swig_go_1; 
  
  result = sfRenderWindow_getViewport((sfRenderWindow const *)arg1,(sfView const *)arg2);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfRenderWindow_mapPixelToCoords_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVector2i *_swig_go_1, sfView *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2i arg2 ;
  sfView *arg3 = (sfView *) 0 ;
  sfVector2i *argp2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  argp2 = (sfVector2i *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2i");
  }
  arg2 = (sfVector2i)*argp2;
  
  arg3 = *(sfView **)&_swig_go_2; 
  
  result = sfRenderWindow_mapPixelToCoords((sfRenderWindow const *)arg1,SWIG_STD_MOVE(arg2),(sfView const *)arg3);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2i *_wrap_sfRenderWindow_mapCoordsToPixel_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVector2f *_swig_go_1, sfView *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2f arg2 ;
  sfView *arg3 = (sfView *) 0 ;
  sfVector2f *argp2 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  arg3 = *(sfView **)&_swig_go_2; 
  
  result = sfRenderWindow_mapCoordsToPixel((sfRenderWindow const *)arg1,SWIG_STD_MOVE(arg2),(sfView const *)arg3);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


void _wrap_sfRenderWindow_drawSprite_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfSprite *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfSprite *arg2 = (sfSprite *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfSprite **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawSprite(arg1,(sfSprite const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawText_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfText *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfText *arg2 = (sfText *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfText **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawText(arg1,(sfText const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawShape_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfShape *arg2 = (sfShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawShape(arg1,(sfShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawCircleShape_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfCircleShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfCircleShape *arg2 = (sfCircleShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfCircleShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawCircleShape(arg1,(sfCircleShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawConvexShape_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfConvexShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfConvexShape *arg2 = (sfConvexShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfConvexShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawConvexShape(arg1,(sfConvexShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawRectangleShape_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfRectangleShape *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfRectangleShape *arg2 = (sfRectangleShape *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfRectangleShape **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawRectangleShape(arg1,(sfRectangleShape const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawVertexArray_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVertexArray *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVertexArray *arg2 = (sfVertexArray *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfVertexArray **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawVertexArray(arg1,(sfVertexArray const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawVertexBuffer_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVertexBuffer *_swig_go_1, sfRenderStates *_swig_go_2) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVertexBuffer *arg2 = (sfVertexBuffer *) 0 ;
  sfRenderStates *arg3 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfVertexBuffer **)&_swig_go_1; 
  arg3 = *(sfRenderStates **)&_swig_go_2; 
  
  sfRenderWindow_drawVertexBuffer(arg1,(sfVertexBuffer const *)arg2,(sfRenderStates const *)arg3);
  
}


void _wrap_sfRenderWindow_drawVertexBufferRange_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVertexBuffer *_swig_go_1, long long _swig_go_2, long long _swig_go_3, sfRenderStates *_swig_go_4) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVertexBuffer *arg2 = (sfVertexBuffer *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  sfRenderStates *arg5 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfVertexBuffer **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  arg5 = *(sfRenderStates **)&_swig_go_4; 
  
  sfRenderWindow_drawVertexBufferRange(arg1,(sfVertexBuffer const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),(sfRenderStates const *)arg5);
  
}


void _wrap_sfRenderWindow_drawPrimitives_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, sfVertex *_swig_go_1, long long _swig_go_2, intgo _swig_go_3, sfRenderStates *_swig_go_4) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVertex *arg2 = (sfVertex *) 0 ;
  size_t arg3 ;
  sfPrimitiveType arg4 ;
  sfRenderStates *arg5 = (sfRenderStates *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(sfVertex **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = (sfPrimitiveType)_swig_go_3; 
  arg5 = *(sfRenderStates **)&_swig_go_4; 
  
  sfRenderWindow_drawPrimitives(arg1,(sfVertex const *)arg2,SWIG_STD_MOVE(arg3),arg4,(sfRenderStates const *)arg5);
  
}


void _wrap_sfRenderWindow_pushGLStates_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_pushGLStates(arg1);
  
}


void _wrap_sfRenderWindow_popGLStates_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_popGLStates(arg1);
  
}


void _wrap_sfRenderWindow_resetGLStates_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  sfRenderWindow_resetGLStates(arg1);
  
}


sfImage *_wrap_sfRenderWindow_capture_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = (sfImage *)sfRenderWindow_capture((sfRenderWindow const *)arg1);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


sfVector2i *_wrap_sfMouse_getPositionRenderWindow_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  
  result = sfMouse_getPositionRenderWindow((sfRenderWindow const *)arg1);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


void _wrap_sfMouse_setPositionRenderWindow_graphics_c1a031043095f7b7(sfVector2i *_swig_go_0, sfRenderWindow *_swig_go_1) {
  sfVector2i arg1 ;
  sfRenderWindow *arg2 = (sfRenderWindow *) 0 ;
  sfVector2i *argp1 ;
  
  
  argp1 = (sfVector2i *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2i");
  }
  arg1 = (sfVector2i)*argp1;
  
  arg2 = *(sfRenderWindow **)&_swig_go_1; 
  
  sfMouse_setPositionRenderWindow(SWIG_STD_MOVE(arg1),(sfRenderWindow const *)arg2);
  
}


sfVector2i *_wrap_sfTouch_getPositionRenderWindow_graphics_c1a031043095f7b7(intgo _swig_go_0, sfRenderWindow *_swig_go_1) {
  unsigned int arg1 ;
  sfRenderWindow *arg2 = (sfRenderWindow *) 0 ;
  sfVector2i result;
  sfVector2i *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = *(sfRenderWindow **)&_swig_go_1; 
  
  result = sfTouch_getPositionRenderWindow(arg1,(sfRenderWindow const *)arg2);
  *(sfVector2i **)&_swig_go_result = new sfVector2i(result); 
  return _swig_go_result;
}


intgo _wrap_sfRenderWindow_createVulkanSurface_graphics_c1a031043095f7b7(sfRenderWindow *_swig_go_0, VkInstance *_swig_go_1, VkSurfaceKHR *_swig_go_2, VkAllocationCallbacks *_swig_go_3) {
  sfRenderWindow *arg1 = (sfRenderWindow *) 0 ;
  VkInstance *arg2 = (VkInstance *) 0 ;
  VkSurfaceKHR *arg3 = (VkSurfaceKHR *) 0 ;
  VkAllocationCallbacks *arg4 = (VkAllocationCallbacks *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfRenderWindow **)&_swig_go_0; 
  arg2 = *(VkInstance **)&_swig_go_1; 
  arg3 = *(VkSurfaceKHR **)&_swig_go_2; 
  arg4 = *(VkAllocationCallbacks **)&_swig_go_3; 
  
  result = (sfBool)sfRenderWindow_createVulkanSurface(arg1,(VkInstance const *)arg2,arg3,(VkAllocationCallbacks const *)arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfShader *_wrap_sfShader_createFromFile_graphics_c1a031043095f7b7(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  sfShader *result = 0 ;
  sfShader *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (sfShader *)sfShader_createFromFile((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(sfShader **)&_swig_go_result = (sfShader *)result; 
  free(arg1); 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


sfShader *_wrap_sfShader_createFromMemory_graphics_c1a031043095f7b7(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  sfShader *result = 0 ;
  sfShader *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (sfShader *)sfShader_createFromMemory((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(sfShader **)&_swig_go_result = (sfShader *)result; 
  free(arg1); 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


sfShader *_wrap_sfShader_createFromStream_graphics_c1a031043095f7b7(sfInputStream *_swig_go_0, sfInputStream *_swig_go_1, sfInputStream *_swig_go_2) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStream *arg2 = (sfInputStream *) 0 ;
  sfInputStream *arg3 = (sfInputStream *) 0 ;
  sfShader *result = 0 ;
  sfShader *_swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfInputStream **)&_swig_go_1; 
  arg3 = *(sfInputStream **)&_swig_go_2; 
  
  result = (sfShader *)sfShader_createFromStream(arg1,arg2,arg3);
  *(sfShader **)&_swig_go_result = (sfShader *)result; 
  return _swig_go_result;
}


void _wrap_sfShader_destroy_graphics_c1a031043095f7b7(sfShader *_swig_go_0) {
  sfShader *arg1 = (sfShader *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  sfShader_destroy(arg1);
  
}


void _wrap_sfShader_setFloatUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (float)_swig_go_2; 
  
  sfShader_setFloatUniform(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setVec2Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector2f *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslVec2 arg3 ;
  sfGlslVec2 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslVec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslVec2");
  }
  arg3 = (sfGlslVec2)*argp3;
  
  
  sfShader_setVec2Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setVec3Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector3f *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslVec3 arg3 ;
  sfGlslVec3 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslVec3 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslVec3");
  }
  arg3 = (sfGlslVec3)*argp3;
  
  
  sfShader_setVec3Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setVec4Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslVec4 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslVec4 arg3 ;
  sfGlslVec4 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslVec4 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslVec4");
  }
  arg3 = (sfGlslVec4)*argp3;
  
  
  sfShader_setVec4Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setColorUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfColor *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfColor arg3 ;
  sfColor *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfColor *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg3 = (sfColor)*argp3;
  
  
  sfShader_setColorUniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setIntUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  sfShader_setIntUniform(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setIvec2Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector2i *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslIvec2 arg3 ;
  sfGlslIvec2 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslIvec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslIvec2");
  }
  arg3 = (sfGlslIvec2)*argp3;
  
  
  sfShader_setIvec2Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setIvec3Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslIvec3 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslIvec3 arg3 ;
  sfGlslIvec3 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslIvec3 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslIvec3");
  }
  arg3 = (sfGlslIvec3)*argp3;
  
  
  sfShader_setIvec3Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setIvec4Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslIvec4 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslIvec4 arg3 ;
  sfGlslIvec4 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslIvec4 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslIvec4");
  }
  arg3 = (sfGlslIvec4)*argp3;
  
  
  sfShader_setIvec4Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setIntColorUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfColor *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfColor arg3 ;
  sfColor *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfColor *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg3 = (sfColor)*argp3;
  
  
  sfShader_setIntColorUniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setBoolUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfBool arg3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (sfBool)_swig_go_2; 
  
  sfShader_setBoolUniform(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setBvec2Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslBvec2 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslBvec2 arg3 ;
  sfGlslBvec2 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslBvec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslBvec2");
  }
  arg3 = (sfGlslBvec2)*argp3;
  
  
  sfShader_setBvec2Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setBvec3Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslBvec3 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslBvec3 arg3 ;
  sfGlslBvec3 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslBvec3 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslBvec3");
  }
  arg3 = (sfGlslBvec3)*argp3;
  
  
  sfShader_setBvec3Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setBvec4Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslBvec4 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslBvec4 arg3 ;
  sfGlslBvec4 *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfGlslBvec4 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfGlslBvec4");
  }
  arg3 = (sfGlslBvec4)*argp3;
  
  
  sfShader_setBvec4Uniform(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setMat3Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslMat3 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslMat3 *arg3 = (sfGlslMat3 *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslMat3 **)&_swig_go_2; 
  
  sfShader_setMat3Uniform(arg1,(char const *)arg2,(sfGlslMat3 const *)arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setMat4Uniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslMat4 *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslMat4 *arg3 = (sfGlslMat4 *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslMat4 **)&_swig_go_2; 
  
  sfShader_setMat4Uniform(arg1,(char const *)arg2,(sfGlslMat4 const *)arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setTextureUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfTexture *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfTexture *arg3 = (sfTexture *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfTexture **)&_swig_go_2; 
  
  sfShader_setTextureUniform(arg1,(char const *)arg2,(sfTexture const *)arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setCurrentTextureUniform_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  sfShader_setCurrentTextureUniform(arg1,(char const *)arg2);
  
  free(arg2); 
}


void _wrap_sfShader_setFloatUniformArray_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, float *_swig_go_2, long long _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(float **)&_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  sfShader_setFloatUniformArray(arg1,(char const *)arg2,(float const *)arg3,SWIG_STD_MOVE(arg4));
  
  free(arg2); 
}


void _wrap_sfShader_setVec2UniformArray_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector2f *_swig_go_2, long long _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslVec2 *arg3 = (sfGlslVec2 *) 0 ;
  size_t arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslVec2 **)&_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  sfShader_setVec2UniformArray(arg1,(char const *)arg2,(sfVector2f const *)arg3,SWIG_STD_MOVE(arg4));
  
  free(arg2); 
}


void _wrap_sfShader_setVec3UniformArray_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector3f *_swig_go_2, long long _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslVec3 *arg3 = (sfGlslVec3 *) 0 ;
  size_t arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslVec3 **)&_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  sfShader_setVec3UniformArray(arg1,(char const *)arg2,(sfVector3f const *)arg3,SWIG_STD_MOVE(arg4));
  
  free(arg2); 
}


void _wrap_sfShader_setVec4UniformArray_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslVec4 *_swig_go_2, long long _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslVec4 *arg3 = (sfGlslVec4 *) 0 ;
  size_t arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslVec4 **)&_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  sfShader_setVec4UniformArray(arg1,(char const *)arg2,(sfGlslVec4 const *)arg3,SWIG_STD_MOVE(arg4));
  
  free(arg2); 
}


void _wrap_sfShader_setMat3UniformArray_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslMat3 *_swig_go_2, long long _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslMat3 *arg3 = (sfGlslMat3 *) 0 ;
  size_t arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslMat3 **)&_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  sfShader_setMat3UniformArray(arg1,(char const *)arg2,(sfGlslMat3 const *)arg3,SWIG_STD_MOVE(arg4));
  
  free(arg2); 
}


void _wrap_sfShader_setMat4UniformArray_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfGlslMat4 *_swig_go_2, long long _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfGlslMat4 *arg3 = (sfGlslMat4 *) 0 ;
  size_t arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfGlslMat4 **)&_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  sfShader_setMat4UniformArray(arg1,(char const *)arg2,(sfGlslMat4 const *)arg3,SWIG_STD_MOVE(arg4));
  
  free(arg2); 
}


void _wrap_sfShader_setFloatParameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (float)_swig_go_2; 
  
  sfShader_setFloatParameter(arg1,(char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setFloat2Parameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, float _swig_go_3) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  
  sfShader_setFloat2Parameter(arg1,(char const *)arg2,arg3,arg4);
  
  free(arg2); 
}


void _wrap_sfShader_setFloat3Parameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  
  sfShader_setFloat3Parameter(arg1,(char const *)arg2,arg3,arg4,arg5);
  
  free(arg2); 
}


void _wrap_sfShader_setFloat4Parameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  arg6 = (float)_swig_go_5; 
  
  sfShader_setFloat4Parameter(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  
  free(arg2); 
}


void _wrap_sfShader_setVector2Parameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector2f *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfVector2f arg3 ;
  sfVector2f *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfVector2f *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg3 = (sfVector2f)*argp3;
  
  
  sfShader_setVector2Parameter(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setVector3Parameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfVector3f *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfVector3f arg3 ;
  sfVector3f *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfVector3f *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector3f");
  }
  arg3 = (sfVector3f)*argp3;
  
  
  sfShader_setVector3Parameter(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setColorParameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfColor *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfColor arg3 ;
  sfColor *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfColor *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg3 = (sfColor)*argp3;
  
  
  sfShader_setColorParameter(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setTransformParameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfTransform *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfTransform arg3 ;
  sfTransform *argp3 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (sfTransform *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null sfTransform");
  }
  arg3 = (sfTransform)*argp3;
  
  
  sfShader_setTransformParameter(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  
  free(arg2); 
}


void _wrap_sfShader_setTextureParameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1, sfTexture *_swig_go_2) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  sfTexture *arg3 = (sfTexture *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(sfTexture **)&_swig_go_2; 
  
  sfShader_setTextureParameter(arg1,(char const *)arg2,(sfTexture const *)arg3);
  
  free(arg2); 
}


void _wrap_sfShader_setCurrentTextureParameter_graphics_c1a031043095f7b7(sfShader *_swig_go_0, _gostring_ _swig_go_1) {
  sfShader *arg1 = (sfShader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  sfShader_setCurrentTextureParameter(arg1,(char const *)arg2);
  
  free(arg2); 
}


intgo _wrap_sfShader_getNativeHandle_graphics_c1a031043095f7b7(sfShader *_swig_go_0) {
  sfShader *arg1 = (sfShader *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  result = (unsigned int)sfShader_getNativeHandle((sfShader const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfShader_bind_graphics_c1a031043095f7b7(sfShader *_swig_go_0) {
  sfShader *arg1 = (sfShader *) 0 ;
  
  arg1 = *(sfShader **)&_swig_go_0; 
  
  sfShader_bind((sfShader const *)arg1);
  
}


intgo _wrap_sfShader_isAvailable_graphics_c1a031043095f7b7() {
  sfBool result;
  intgo _swig_go_result;
  
  
  result = (sfBool)sfShader_isAvailable();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfShader_isGeometryAvailable_graphics_c1a031043095f7b7() {
  sfBool result;
  intgo _swig_go_result;
  
  
  result = (sfBool)sfShader_isGeometryAvailable();
  _swig_go_result = result; 
  return _swig_go_result;
}


sfShape *_wrap_sfShape_create_graphics_c1a031043095f7b7(void* _swig_go_0, void* _swig_go_1, void *_swig_go_2) {
  sfShapeGetPointCountCallback arg1 = (sfShapeGetPointCountCallback) 0 ;
  sfShapeGetPointCallback arg2 = (sfShapeGetPointCallback) 0 ;
  void *arg3 = (void *) 0 ;
  sfShape *result = 0 ;
  sfShape *_swig_go_result;
  
  arg1 = *(sfShapeGetPointCountCallback *)&_swig_go_0; 
  arg2 = *(sfShapeGetPointCallback *)&_swig_go_1; 
  arg3 = *(void **)&_swig_go_2; 
  
  result = (sfShape *)sfShape_create(arg1,arg2,arg3);
  *(sfShape **)&_swig_go_result = (sfShape *)result; 
  return _swig_go_result;
}


void _wrap_sfShape_destroy_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  sfShape_destroy(arg1);
  
}


void _wrap_sfShape_setPosition_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfShape_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfShape_setRotation_graphics_c1a031043095f7b7(sfShape *_swig_go_0, float _swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfShape_setRotation(arg1,arg2);
  
}


void _wrap_sfShape_setScale_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfShape_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfShape_setOrigin_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfShape_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfShape_getPosition_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getPosition((sfShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfShape_getRotation_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = (float)sfShape_getRotation((sfShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfShape_getScale_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getScale((sfShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfShape_getOrigin_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getOrigin((sfShape const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfShape_move_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfShape_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfShape_rotate_graphics_c1a031043095f7b7(sfShape *_swig_go_0, float _swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfShape_rotate(arg1,arg2);
  
}


void _wrap_sfShape_scale_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfVector2f *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfShape_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfShape_getTransform_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getTransform((sfShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfShape_getInverseTransform_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getInverseTransform((sfShape const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfShape_setTexture_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfTexture *_swig_go_1, intgo _swig_go_2) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  sfBool arg3 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  arg3 = (sfBool)_swig_go_2; 
  
  sfShape_setTexture(arg1,(sfTexture const *)arg2,arg3);
  
}


void _wrap_sfShape_setTextureRect_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfIntRect *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfIntRect arg2 ;
  sfIntRect *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfIntRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfIntRect");
  }
  arg2 = (sfIntRect)*argp2;
  
  
  sfShape_setTextureRect(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfShape_setFillColor_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfColor *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfShape_setFillColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfShape_setOutlineColor_graphics_c1a031043095f7b7(sfShape *_swig_go_0, sfColor *_swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfShape_setOutlineColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfShape_setOutlineThickness_graphics_c1a031043095f7b7(sfShape *_swig_go_0, float _swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  float arg2 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfShape_setOutlineThickness(arg1,arg2);
  
}


sfTexture *_wrap_sfShape_getTexture_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = (sfTexture *)sfShape_getTexture((sfShape const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfShape_getTextureRect_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getTextureRect((sfShape const *)arg1);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfShape_getFillColor_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getFillColor((sfShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfShape_getOutlineColor_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getOutlineColor((sfShape const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


float _wrap_sfShape_getOutlineThickness_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = (float)sfShape_getOutlineThickness((sfShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_sfShape_getPointCount_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getPointCount((sfShape const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfShape_getPoint_graphics_c1a031043095f7b7(sfShape *_swig_go_0, long long _swig_go_1) {
  sfShape *arg1 = (sfShape *) 0 ;
  size_t arg2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = sfShape_getPoint((sfShape const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfShape_getLocalBounds_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getLocalBounds((sfShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfShape_getGlobalBounds_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  result = sfShape_getGlobalBounds((sfShape const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


void _wrap_sfShape_update_graphics_c1a031043095f7b7(sfShape *_swig_go_0) {
  sfShape *arg1 = (sfShape *) 0 ;
  
  arg1 = *(sfShape **)&_swig_go_0; 
  
  sfShape_update(arg1);
  
}


sfSprite *_wrap_sfSprite_create_graphics_c1a031043095f7b7() {
  sfSprite *result = 0 ;
  sfSprite *_swig_go_result;
  
  
  result = (sfSprite *)sfSprite_create();
  *(sfSprite **)&_swig_go_result = (sfSprite *)result; 
  return _swig_go_result;
}


sfSprite *_wrap_sfSprite_copy_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfSprite *result = 0 ;
  sfSprite *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = (sfSprite *)sfSprite_copy((sfSprite const *)arg1);
  *(sfSprite **)&_swig_go_result = (sfSprite *)result; 
  return _swig_go_result;
}


void _wrap_sfSprite_destroy_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  sfSprite_destroy(arg1);
  
}


void _wrap_sfSprite_setPosition_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfVector2f *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfSprite_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfSprite_setRotation_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, float _swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  float arg2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfSprite_setRotation(arg1,arg2);
  
}


void _wrap_sfSprite_setScale_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfVector2f *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfSprite_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfSprite_setOrigin_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfVector2f *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfSprite_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfSprite_getPosition_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getPosition((sfSprite const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfSprite_getRotation_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = (float)sfSprite_getRotation((sfSprite const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfSprite_getScale_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getScale((sfSprite const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfSprite_getOrigin_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getOrigin((sfSprite const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfSprite_move_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfVector2f *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfSprite_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfSprite_rotate_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, float _swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  float arg2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfSprite_rotate(arg1,arg2);
  
}


void _wrap_sfSprite_scale_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfVector2f *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfSprite_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfSprite_getTransform_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getTransform((sfSprite const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfSprite_getInverseTransform_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getInverseTransform((sfSprite const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfSprite_setTexture_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfTexture *_swig_go_1, intgo _swig_go_2) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  sfBool arg3 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  arg3 = (sfBool)_swig_go_2; 
  
  sfSprite_setTexture(arg1,(sfTexture const *)arg2,arg3);
  
}


void _wrap_sfSprite_setTextureRect_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfIntRect *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfIntRect arg2 ;
  sfIntRect *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfIntRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfIntRect");
  }
  arg2 = (sfIntRect)*argp2;
  
  
  sfSprite_setTextureRect(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfSprite_setColor_graphics_c1a031043095f7b7(sfSprite *_swig_go_0, sfColor *_swig_go_1) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfSprite_setColor(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTexture *_wrap_sfSprite_getTexture_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = (sfTexture *)sfSprite_getTexture((sfSprite const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfIntRect *_wrap_sfSprite_getTextureRect_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfIntRect result;
  sfIntRect *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getTextureRect((sfSprite const *)arg1);
  *(sfIntRect **)&_swig_go_result = new sfIntRect(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfSprite_getColor_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getColor((sfSprite const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfSprite_getLocalBounds_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getLocalBounds((sfSprite const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfSprite_getGlobalBounds_graphics_c1a031043095f7b7(sfSprite *_swig_go_0) {
  sfSprite *arg1 = (sfSprite *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfSprite **)&_swig_go_0; 
  
  result = sfSprite_getGlobalBounds((sfSprite const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


intgo _wrap_sfTextRegular_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTextRegular;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTextBold_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTextBold;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTextItalic_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTextItalic;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTextUnderlined_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTextUnderlined;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTextStrikeThrough_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTextStrikeThrough;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


sfText *_wrap_sfText_create_graphics_c1a031043095f7b7() {
  sfText *result = 0 ;
  sfText *_swig_go_result;
  
  
  result = (sfText *)sfText_create();
  *(sfText **)&_swig_go_result = (sfText *)result; 
  return _swig_go_result;
}


sfText *_wrap_sfText_copy_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfText *result = 0 ;
  sfText *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (sfText *)sfText_copy((sfText const *)arg1);
  *(sfText **)&_swig_go_result = (sfText *)result; 
  return _swig_go_result;
}


void _wrap_sfText_destroy_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  sfText_destroy(arg1);
  
}


void _wrap_sfText_setPosition_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfVector2f *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfText_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfText_setRotation_graphics_c1a031043095f7b7(sfText *_swig_go_0, float _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  float arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfText_setRotation(arg1,arg2);
  
}


void _wrap_sfText_setScale_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfVector2f *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfText_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfText_setOrigin_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfVector2f *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfText_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfText_getPosition_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getPosition((sfText const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfText_getRotation_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (float)sfText_getRotation((sfText const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfText_getScale_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getScale((sfText const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfText_getOrigin_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getOrigin((sfText const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfText_move_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfVector2f *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfText_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfText_rotate_graphics_c1a031043095f7b7(sfText *_swig_go_0, float _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  float arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfText_rotate(arg1,arg2);
  
}


void _wrap_sfText_scale_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfVector2f *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfText_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfText_getTransform_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getTransform((sfText const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfText_getInverseTransform_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getInverseTransform((sfText const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfText_setString_graphics_c1a031043095f7b7(sfText *_swig_go_0, _gostring_ _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  sfText_setString(arg1,(char const *)arg2);
  
  free(arg2); 
}


void _wrap_sfText_setUnicodeString_graphics_c1a031043095f7b7(sfText *_swig_go_0, intgo *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfUint32 *arg2 = (sfUint32 *) 0 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = *(sfUint32 **)&_swig_go_1; 
  
  sfText_setUnicodeString(arg1,(unsigned int const *)arg2);
  
}


void _wrap_sfText_setFont_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfFont *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfFont *arg2 = (sfFont *) 0 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = *(sfFont **)&_swig_go_1; 
  
  sfText_setFont(arg1,(sfFont const *)arg2);
  
}


void _wrap_sfText_setCharacterSize_graphics_c1a031043095f7b7(sfText *_swig_go_0, intgo _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  sfText_setCharacterSize(arg1,arg2);
  
}


void _wrap_sfText_setLineSpacing_graphics_c1a031043095f7b7(sfText *_swig_go_0, float _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  float arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfText_setLineSpacing(arg1,arg2);
  
}


void _wrap_sfText_setLetterSpacing_graphics_c1a031043095f7b7(sfText *_swig_go_0, float _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  float arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfText_setLetterSpacing(arg1,arg2);
  
}


void _wrap_sfText_setStyle_graphics_c1a031043095f7b7(sfText *_swig_go_0, intgo _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfUint32 arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (sfUint32)_swig_go_1; 
  
  sfText_setStyle(arg1,arg2);
  
}


void _wrap_sfText_setColor_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfColor *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfText_setColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfText_setFillColor_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfColor *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfText_setFillColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfText_setOutlineColor_graphics_c1a031043095f7b7(sfText *_swig_go_0, sfColor *_swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  sfColor arg2 ;
  sfColor *argp2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  argp2 = (sfColor *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfColor");
  }
  arg2 = (sfColor)*argp2;
  
  
  sfText_setOutlineColor(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfText_setOutlineThickness_graphics_c1a031043095f7b7(sfText *_swig_go_0, float _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  float arg2 ;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfText_setOutlineThickness(arg1,arg2);
  
}


_gostring_ _wrap_sfText_getString_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (char *)sfText_getString((sfText const *)arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo *_wrap_sfText_getUnicodeString_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfUint32 *result = 0 ;
  intgo *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (sfUint32 *)sfText_getUnicodeString((sfText const *)arg1);
  *(sfUint32 **)&_swig_go_result = (sfUint32 *)result; 
  return _swig_go_result;
}


sfFont *_wrap_sfText_getFont_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfFont *result = 0 ;
  sfFont *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (sfFont *)sfText_getFont((sfText const *)arg1);
  *(sfFont **)&_swig_go_result = (sfFont *)result; 
  return _swig_go_result;
}


intgo _wrap_sfText_getCharacterSize_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (unsigned int)sfText_getCharacterSize((sfText const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfText_getLetterSpacing_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (float)sfText_getLetterSpacing((sfText const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_sfText_getLineSpacing_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (float)sfText_getLineSpacing((sfText const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfText_getStyle_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfUint32 result;
  intgo _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (sfUint32)sfText_getStyle((sfText const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfColor *_wrap_sfText_getColor_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getColor((sfText const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfText_getFillColor_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getFillColor((sfText const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


sfColor *_wrap_sfText_getOutlineColor_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfColor result;
  sfColor *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getOutlineColor((sfText const *)arg1);
  *(sfColor **)&_swig_go_result = new sfColor(result); 
  return _swig_go_result;
}


float _wrap_sfText_getOutlineThickness_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = (float)sfText_getOutlineThickness((sfText const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfText_findCharacterPos_graphics_c1a031043095f7b7(sfText *_swig_go_0, long long _swig_go_1) {
  sfText *arg1 = (sfText *) 0 ;
  size_t arg2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = sfText_findCharacterPos((sfText const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfText_getLocalBounds_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getLocalBounds((sfText const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfText_getGlobalBounds_graphics_c1a031043095f7b7(sfText *_swig_go_0) {
  sfText *arg1 = (sfText *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfText **)&_swig_go_0; 
  
  result = sfText_getGlobalBounds((sfText const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


intgo _wrap_sfTextureNormalized_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTextureNormalized;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTexturePixels_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfTexturePixels;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_create_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (sfTexture *)sfTexture_create(arg1,arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createFromFile_graphics_c1a031043095f7b7(_gostring_ _swig_go_0, sfIntRect *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  result = (sfTexture *)sfTexture_createFromFile((char const *)arg1,(sfIntRect const *)arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  free(arg1); 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createSrgbFromFile_graphics_c1a031043095f7b7(_gostring_ _swig_go_0, sfIntRect *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  result = (sfTexture *)sfTexture_createSrgbFromFile((char const *)arg1,(sfIntRect const *)arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  free(arg1); 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createFromMemory_graphics_c1a031043095f7b7(void *_swig_go_0, long long _swig_go_1, sfIntRect *_swig_go_2) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  sfIntRect *arg3 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = *(sfIntRect **)&_swig_go_2; 
  
  result = (sfTexture *)sfTexture_createFromMemory((void const *)arg1,SWIG_STD_MOVE(arg2),(sfIntRect const *)arg3);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createSrgbFromMemory_graphics_c1a031043095f7b7(void *_swig_go_0, long long _swig_go_1, sfIntRect *_swig_go_2) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  sfIntRect *arg3 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(void **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = *(sfIntRect **)&_swig_go_2; 
  
  result = (sfTexture *)sfTexture_createSrgbFromMemory((void const *)arg1,SWIG_STD_MOVE(arg2),(sfIntRect const *)arg3);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createFromStream_graphics_c1a031043095f7b7(sfInputStream *_swig_go_0, sfIntRect *_swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  result = (sfTexture *)sfTexture_createFromStream(arg1,(sfIntRect const *)arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createSrgbFromStream_graphics_c1a031043095f7b7(sfInputStream *_swig_go_0, sfIntRect *_swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  result = (sfTexture *)sfTexture_createSrgbFromStream(arg1,(sfIntRect const *)arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createFromImage_graphics_c1a031043095f7b7(sfImage *_swig_go_0, sfIntRect *_swig_go_1) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  result = (sfTexture *)sfTexture_createFromImage((sfImage const *)arg1,(sfIntRect const *)arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_createSrgbFromImage_graphics_c1a031043095f7b7(sfImage *_swig_go_0, sfIntRect *_swig_go_1) {
  sfImage *arg1 = (sfImage *) 0 ;
  sfIntRect *arg2 = (sfIntRect *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfImage **)&_swig_go_0; 
  arg2 = *(sfIntRect **)&_swig_go_1; 
  
  result = (sfTexture *)sfTexture_createSrgbFromImage((sfImage const *)arg1,(sfIntRect const *)arg2);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


sfTexture *_wrap_sfTexture_copy_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfTexture *result = 0 ;
  sfTexture *_swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (sfTexture *)sfTexture_copy((sfTexture const *)arg1);
  *(sfTexture **)&_swig_go_result = (sfTexture *)result; 
  return _swig_go_result;
}


void _wrap_sfTexture_destroy_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  sfTexture_destroy(arg1);
  
}


sfVector2u *_wrap_sfTexture_getSize_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfVector2u result;
  sfVector2u *_swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = sfTexture_getSize((sfTexture const *)arg1);
  *(sfVector2u **)&_swig_go_result = new sfVector2u(result); 
  return _swig_go_result;
}


sfImage *_wrap_sfTexture_copyToImage_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfImage *result = 0 ;
  sfImage *_swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (sfImage *)sfTexture_copyToImage((sfTexture const *)arg1);
  *(sfImage **)&_swig_go_result = (sfImage *)result; 
  return _swig_go_result;
}


void _wrap_sfTexture_updateFromPixels_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, char *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfUint8 *arg2 = (sfUint8 *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = *(sfUint8 **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = (unsigned int)_swig_go_4; 
  arg6 = (unsigned int)_swig_go_5; 
  
  sfTexture_updateFromPixels(arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6);
  
}


void _wrap_sfTexture_updateFromTexture_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, sfTexture *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  sfTexture_updateFromTexture(arg1,(sfTexture const *)arg2,arg3,arg4);
  
}


void _wrap_sfTexture_updateFromImage_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, sfImage *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfImage *arg2 = (sfImage *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = *(sfImage **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  sfTexture_updateFromImage(arg1,(sfImage const *)arg2,arg3,arg4);
  
}


void _wrap_sfTexture_updateFromWindow_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, sfWindow *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfWindow *arg2 = (sfWindow *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = *(sfWindow **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  sfTexture_updateFromWindow(arg1,(sfWindow const *)arg2,arg3,arg4);
  
}


void _wrap_sfTexture_updateFromRenderWindow_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, sfRenderWindow *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfRenderWindow *arg2 = (sfRenderWindow *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = *(sfRenderWindow **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  sfTexture_updateFromRenderWindow(arg1,(sfRenderWindow const *)arg2,arg3,arg4);
  
}


void _wrap_sfTexture_setSmooth_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, intgo _swig_go_1) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfTexture_setSmooth(arg1,arg2);
  
}


intgo _wrap_sfTexture_isSmooth_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (sfBool)sfTexture_isSmooth((sfTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTexture_isSrgb_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (sfBool)sfTexture_isSrgb((sfTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfTexture_setRepeated_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, intgo _swig_go_1) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfBool arg2 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = (sfBool)_swig_go_1; 
  
  sfTexture_setRepeated(arg1,arg2);
  
}


intgo _wrap_sfTexture_isRepeated_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (sfBool)sfTexture_isRepeated((sfTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTexture_generateMipmap_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (sfBool)sfTexture_generateMipmap(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfTexture_swap_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, sfTexture *_swig_go_1) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfTexture *arg2 = (sfTexture *) 0 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = *(sfTexture **)&_swig_go_1; 
  
  sfTexture_swap(arg1,arg2);
  
}


intgo _wrap_sfTexture_getNativeHandle_graphics_c1a031043095f7b7(sfTexture *_swig_go_0) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  
  result = (unsigned int)sfTexture_getNativeHandle((sfTexture const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfTexture_bind_graphics_c1a031043095f7b7(sfTexture *_swig_go_0, intgo _swig_go_1) {
  sfTexture *arg1 = (sfTexture *) 0 ;
  sfTextureCoordinateType arg2 ;
  
  arg1 = *(sfTexture **)&_swig_go_0; 
  arg2 = (sfTextureCoordinateType)_swig_go_1; 
  
  sfTexture_bind((sfTexture const *)arg1,arg2);
  
}


intgo _wrap_sfTexture_getMaximumSize_graphics_c1a031043095f7b7() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = (unsigned int)sfTexture_getMaximumSize();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfTransform_matrix_set_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float *_swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  
  {
    size_t ii;
    float *b = (float *) arg1->matrix;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


float *_wrap_sfTransform_matrix_get_graphics_c1a031043095f7b7(sfTransform *_swig_go_0) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  
  result = (float *)(float *) ((arg1)->matrix);
  *(float **)&_swig_go_result = result; 
  return _swig_go_result;
}


sfTransform *_wrap_new_sfTransform_graphics_c1a031043095f7b7() {
  sfTransform *result = 0 ;
  sfTransform *_swig_go_result;
  
  
  result = (sfTransform *)new sfTransform();
  *(sfTransform **)&_swig_go_result = (sfTransform *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfTransform_graphics_c1a031043095f7b7(sfTransform *_swig_go_0) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  
  delete arg1;
  
}


sfTransform *_wrap_sfTransform_Identity_get_graphics_c1a031043095f7b7() {
  sfTransform *result = 0 ;
  sfTransform *_swig_go_result;
  
  
  result = (sfTransform *)&sfTransform_Identity;
  *(sfTransform **)&_swig_go_result = (sfTransform *)result; 
  return _swig_go_result;
}


sfTransform *_wrap_sfTransform_fromMatrix_graphics_c1a031043095f7b7(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, float _swig_go_6, float _swig_go_7, float _swig_go_8) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  arg6 = (float)_swig_go_5; 
  arg7 = (float)_swig_go_6; 
  arg8 = (float)_swig_go_7; 
  arg9 = (float)_swig_go_8; 
  
  result = sfTransform_fromMatrix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfTransform_getMatrix_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float *_swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = *(float **)&_swig_go_1; 
  
  sfTransform_getMatrix((sfTransform const *)arg1,arg2);
  
}


sfTransform *_wrap_sfTransform_getInverse_graphics_c1a031043095f7b7(sfTransform *_swig_go_0) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  
  result = sfTransform_getInverse((sfTransform const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfTransform_transformPoint_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, sfVector2f *_swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  result = sfTransform_transformPoint((sfTransform const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfTransform_transformRect_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, sfFloatRect *_swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  sfFloatRect arg2 ;
  sfFloatRect *argp2 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  
  argp2 = (sfFloatRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfFloatRect");
  }
  arg2 = (sfFloatRect)*argp2;
  
  
  result = sfTransform_transformRect((sfTransform const *)arg1,SWIG_STD_MOVE(arg2));
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


void _wrap_sfTransform_combine_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, sfTransform *_swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  sfTransform *arg2 = (sfTransform *) 0 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = *(sfTransform **)&_swig_go_1; 
  
  sfTransform_combine(arg1,(sfTransform const *)arg2);
  
}


void _wrap_sfTransform_translate_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float _swig_go_1, float _swig_go_2) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  sfTransform_translate(arg1,arg2,arg3);
  
}


void _wrap_sfTransform_rotate_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float _swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float arg2 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfTransform_rotate(arg1,arg2);
  
}


void _wrap_sfTransform_rotateWithCenter_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  
  sfTransform_rotateWithCenter(arg1,arg2,arg3,arg4);
  
}


void _wrap_sfTransform_scale_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float _swig_go_1, float _swig_go_2) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  sfTransform_scale(arg1,arg2,arg3);
  
}


void _wrap_sfTransform_scaleWithCenter_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  arg4 = (float)_swig_go_3; 
  arg5 = (float)_swig_go_4; 
  
  sfTransform_scaleWithCenter(arg1,arg2,arg3,arg4,arg5);
  
}


intgo _wrap_sfTransform_equal_graphics_c1a031043095f7b7(sfTransform *_swig_go_0, sfTransform *_swig_go_1) {
  sfTransform *arg1 = (sfTransform *) 0 ;
  sfTransform *arg2 = (sfTransform *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfTransform **)&_swig_go_0; 
  arg2 = *(sfTransform **)&_swig_go_1; 
  
  result = (sfBool)sfTransform_equal(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfTransformable *_wrap_sfTransformable_create_graphics_c1a031043095f7b7() {
  sfTransformable *result = 0 ;
  sfTransformable *_swig_go_result;
  
  
  result = (sfTransformable *)sfTransformable_create();
  *(sfTransformable **)&_swig_go_result = (sfTransformable *)result; 
  return _swig_go_result;
}


sfTransformable *_wrap_sfTransformable_copy_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfTransformable *result = 0 ;
  sfTransformable *_swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = (sfTransformable *)sfTransformable_copy((sfTransformable const *)arg1);
  *(sfTransformable **)&_swig_go_result = (sfTransformable *)result; 
  return _swig_go_result;
}


void _wrap_sfTransformable_destroy_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  sfTransformable_destroy(arg1);
  
}


void _wrap_sfTransformable_setPosition_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, sfVector2f *_swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfTransformable_setPosition(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfTransformable_setRotation_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, float _swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  float arg2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfTransformable_setRotation(arg1,arg2);
  
}


void _wrap_sfTransformable_setScale_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, sfVector2f *_swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfTransformable_setScale(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfTransformable_setOrigin_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, sfVector2f *_swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfTransformable_setOrigin(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfTransformable_getPosition_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = sfTransformable_getPosition((sfTransformable const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfTransformable_getRotation_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = (float)sfTransformable_getRotation((sfTransformable const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_sfTransformable_getScale_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = sfTransformable_getScale((sfTransformable const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfTransformable_getOrigin_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = sfTransformable_getOrigin((sfTransformable const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


void _wrap_sfTransformable_move_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, sfVector2f *_swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfTransformable_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfTransformable_rotate_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, float _swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  float arg2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfTransformable_rotate(arg1,arg2);
  
}


void _wrap_sfTransformable_scale_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0, sfVector2f *_swig_go_1) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfTransformable_scale(arg1,SWIG_STD_MOVE(arg2));
  
}


sfTransform *_wrap_sfTransformable_getTransform_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = sfTransformable_getTransform((sfTransformable const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


sfTransform *_wrap_sfTransformable_getInverseTransform_graphics_c1a031043095f7b7(sfTransformable *_swig_go_0) {
  sfTransformable *arg1 = (sfTransformable *) 0 ;
  sfTransform result;
  sfTransform *_swig_go_result;
  
  arg1 = *(sfTransformable **)&_swig_go_0; 
  
  result = sfTransformable_getInverseTransform((sfTransformable const *)arg1);
  *(sfTransform **)&_swig_go_result = new sfTransform(result); 
  return _swig_go_result;
}


void _wrap_sfVertex_position_set_graphics_c1a031043095f7b7(sfVertex *_swig_go_0, sfVector2f *_swig_go_1) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  sfVector2f *arg2 = (sfVector2f *) 0 ;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  arg2 = *(sfVector2f **)&_swig_go_1; 
  
  if (arg1) (arg1)->position = *arg2;
  
}


sfVector2f *_wrap_sfVertex_position_get_graphics_c1a031043095f7b7(sfVertex *_swig_go_0) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  sfVector2f *result = 0 ;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  
  result = (sfVector2f *)& ((arg1)->position);
  *(sfVector2f **)&_swig_go_result = (sfVector2f *)result; 
  return _swig_go_result;
}


void _wrap_sfVertex_color_set_graphics_c1a031043095f7b7(sfVertex *_swig_go_0, sfColor *_swig_go_1) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  sfColor *arg2 = (sfColor *) 0 ;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  arg2 = *(sfColor **)&_swig_go_1; 
  
  if (arg1) (arg1)->color = *arg2;
  
}


sfColor *_wrap_sfVertex_color_get_graphics_c1a031043095f7b7(sfVertex *_swig_go_0) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  sfColor *result = 0 ;
  sfColor *_swig_go_result;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  
  result = (sfColor *)& ((arg1)->color);
  *(sfColor **)&_swig_go_result = (sfColor *)result; 
  return _swig_go_result;
}


void _wrap_sfVertex_texCoords_set_graphics_c1a031043095f7b7(sfVertex *_swig_go_0, sfVector2f *_swig_go_1) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  sfVector2f *arg2 = (sfVector2f *) 0 ;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  arg2 = *(sfVector2f **)&_swig_go_1; 
  
  if (arg1) (arg1)->texCoords = *arg2;
  
}


sfVector2f *_wrap_sfVertex_texCoords_get_graphics_c1a031043095f7b7(sfVertex *_swig_go_0) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  sfVector2f *result = 0 ;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  
  result = (sfVector2f *)& ((arg1)->texCoords);
  *(sfVector2f **)&_swig_go_result = (sfVector2f *)result; 
  return _swig_go_result;
}


sfVertex *_wrap_new_sfVertex_graphics_c1a031043095f7b7() {
  sfVertex *result = 0 ;
  sfVertex *_swig_go_result;
  
  
  result = (sfVertex *)new sfVertex();
  *(sfVertex **)&_swig_go_result = (sfVertex *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVertex_graphics_c1a031043095f7b7(sfVertex *_swig_go_0) {
  sfVertex *arg1 = (sfVertex *) 0 ;
  
  arg1 = *(sfVertex **)&_swig_go_0; 
  
  delete arg1;
  
}


sfVertexArray *_wrap_sfVertexArray_create_graphics_c1a031043095f7b7() {
  sfVertexArray *result = 0 ;
  sfVertexArray *_swig_go_result;
  
  
  result = (sfVertexArray *)sfVertexArray_create();
  *(sfVertexArray **)&_swig_go_result = (sfVertexArray *)result; 
  return _swig_go_result;
}


sfVertexArray *_wrap_sfVertexArray_copy_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  sfVertexArray *result = 0 ;
  sfVertexArray *_swig_go_result;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  result = (sfVertexArray *)sfVertexArray_copy((sfVertexArray const *)arg1);
  *(sfVertexArray **)&_swig_go_result = (sfVertexArray *)result; 
  return _swig_go_result;
}


void _wrap_sfVertexArray_destroy_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  sfVertexArray_destroy(arg1);
  
}


long long _wrap_sfVertexArray_getVertexCount_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  result = sfVertexArray_getVertexCount((sfVertexArray const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVertex *_wrap_sfVertexArray_getVertex_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0, long long _swig_go_1) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  size_t arg2 ;
  sfVertex *result = 0 ;
  sfVertex *_swig_go_result;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = (sfVertex *)sfVertexArray_getVertex(arg1,SWIG_STD_MOVE(arg2));
  *(sfVertex **)&_swig_go_result = (sfVertex *)result; 
  return _swig_go_result;
}


void _wrap_sfVertexArray_clear_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  sfVertexArray_clear(arg1);
  
}


void _wrap_sfVertexArray_resize_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0, long long _swig_go_1) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  size_t arg2 ;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  sfVertexArray_resize(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfVertexArray_append_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0, sfVertex *_swig_go_1) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  sfVertex arg2 ;
  sfVertex *argp2 ;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  argp2 = (sfVertex *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVertex");
  }
  arg2 = (sfVertex)*argp2;
  
  
  sfVertexArray_append(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfVertexArray_setPrimitiveType_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0, intgo _swig_go_1) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  sfPrimitiveType arg2 ;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  arg2 = (sfPrimitiveType)_swig_go_1; 
  
  sfVertexArray_setPrimitiveType(arg1,arg2);
  
}


intgo _wrap_sfVertexArray_getPrimitiveType_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  sfPrimitiveType result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  result = (sfPrimitiveType)sfVertexArray_getPrimitiveType(arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfVertexArray_getBounds_graphics_c1a031043095f7b7(sfVertexArray *_swig_go_0) {
  sfVertexArray *arg1 = (sfVertexArray *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfVertexArray **)&_swig_go_0; 
  
  result = sfVertexArray_getBounds(arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


intgo _wrap_sfVertexBufferStream_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfVertexBufferStream;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfVertexBufferDynamic_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfVertexBufferDynamic;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfVertexBufferStatic_graphics_c1a031043095f7b7() {
  int result;
  intgo _swig_go_result;
  
  
  result = sfVertexBufferStatic;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVertexBuffer *_wrap_sfVertexBuffer_create_graphics_c1a031043095f7b7(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  unsigned int arg1 ;
  sfPrimitiveType arg2 ;
  sfVertexBufferUsage arg3 ;
  sfVertexBuffer *result = 0 ;
  sfVertexBuffer *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (sfPrimitiveType)_swig_go_1; 
  arg3 = (sfVertexBufferUsage)_swig_go_2; 
  
  result = (sfVertexBuffer *)sfVertexBuffer_create(arg1,arg2,arg3);
  *(sfVertexBuffer **)&_swig_go_result = (sfVertexBuffer *)result; 
  return _swig_go_result;
}


sfVertexBuffer *_wrap_sfVertexBuffer_copy_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfVertexBuffer *result = 0 ;
  sfVertexBuffer *_swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  result = (sfVertexBuffer *)sfVertexBuffer_copy((sfVertexBuffer const *)arg1);
  *(sfVertexBuffer **)&_swig_go_result = (sfVertexBuffer *)result; 
  return _swig_go_result;
}


void _wrap_sfVertexBuffer_destroy_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  sfVertexBuffer_destroy(arg1);
  
}


intgo _wrap_sfVertexBuffer_getVertexCount_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  result = (unsigned int)sfVertexBuffer_getVertexCount((sfVertexBuffer const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfVertexBuffer_update_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0, sfVertex *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfVertex *arg2 = (sfVertex *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  arg2 = *(sfVertex **)&_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (sfBool)sfVertexBuffer_update(arg1,(sfVertex const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfVertexBuffer_updateFromVertexBuffer_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0, sfVertexBuffer *_swig_go_1) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfVertexBuffer *arg2 = (sfVertexBuffer *) 0 ;
  sfBool result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  arg2 = *(sfVertexBuffer **)&_swig_go_1; 
  
  result = (sfBool)sfVertexBuffer_updateFromVertexBuffer(arg1,(sfVertexBuffer const *)arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVertexBuffer_swap_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0, sfVertexBuffer *_swig_go_1) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfVertexBuffer *arg2 = (sfVertexBuffer *) 0 ;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  arg2 = *(sfVertexBuffer **)&_swig_go_1; 
  
  sfVertexBuffer_swap(arg1,arg2);
  
}


intgo _wrap_sfVertexBuffer_getNativeHandle_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  result = (unsigned int)sfVertexBuffer_getNativeHandle(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVertexBuffer_setPrimitiveType_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0, intgo _swig_go_1) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfPrimitiveType arg2 ;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  arg2 = (sfPrimitiveType)_swig_go_1; 
  
  sfVertexBuffer_setPrimitiveType(arg1,arg2);
  
}


intgo _wrap_sfVertexBuffer_getPrimitiveType_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfPrimitiveType result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  result = (sfPrimitiveType)sfVertexBuffer_getPrimitiveType((sfVertexBuffer const *)arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfVertexBuffer_setUsage_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0, intgo _swig_go_1) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfVertexBufferUsage arg2 ;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  arg2 = (sfVertexBufferUsage)_swig_go_1; 
  
  sfVertexBuffer_setUsage(arg1,arg2);
  
}


intgo _wrap_sfVertexBuffer_getUsage_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  sfVertexBufferUsage result;
  intgo _swig_go_result;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  result = (sfVertexBufferUsage)sfVertexBuffer_getUsage((sfVertexBuffer const *)arg1);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_sfVertexBuffer_bind_graphics_c1a031043095f7b7(sfVertexBuffer *_swig_go_0) {
  sfVertexBuffer *arg1 = (sfVertexBuffer *) 0 ;
  
  arg1 = *(sfVertexBuffer **)&_swig_go_0; 
  
  sfVertexBuffer_bind((sfVertexBuffer const *)arg1);
  
}


intgo _wrap_sfVertexBuffer_isAvailable_graphics_c1a031043095f7b7() {
  sfBool result;
  intgo _swig_go_result;
  
  
  result = (sfBool)sfVertexBuffer_isAvailable();
  _swig_go_result = result; 
  return _swig_go_result;
}


sfView *_wrap_sfView_create_graphics_c1a031043095f7b7() {
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  
  result = (sfView *)sfView_create();
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


sfView *_wrap_sfView_createFromRect_graphics_c1a031043095f7b7(sfFloatRect *_swig_go_0) {
  sfFloatRect arg1 ;
  sfFloatRect *argp1 ;
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  
  argp1 = (sfFloatRect *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfFloatRect");
  }
  arg1 = (sfFloatRect)*argp1;
  
  
  result = (sfView *)sfView_createFromRect(SWIG_STD_MOVE(arg1));
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


sfView *_wrap_sfView_copy_graphics_c1a031043095f7b7(sfView *_swig_go_0) {
  sfView *arg1 = (sfView *) 0 ;
  sfView *result = 0 ;
  sfView *_swig_go_result;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  result = (sfView *)sfView_copy((sfView const *)arg1);
  *(sfView **)&_swig_go_result = (sfView *)result; 
  return _swig_go_result;
}


void _wrap_sfView_destroy_graphics_c1a031043095f7b7(sfView *_swig_go_0) {
  sfView *arg1 = (sfView *) 0 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  sfView_destroy(arg1);
  
}


void _wrap_sfView_setCenter_graphics_c1a031043095f7b7(sfView *_swig_go_0, sfVector2f *_swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfView_setCenter(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfView_setSize_graphics_c1a031043095f7b7(sfView *_swig_go_0, sfVector2f *_swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfView_setSize(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfView_setRotation_graphics_c1a031043095f7b7(sfView *_swig_go_0, float _swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  float arg2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfView_setRotation(arg1,arg2);
  
}


void _wrap_sfView_setViewport_graphics_c1a031043095f7b7(sfView *_swig_go_0, sfFloatRect *_swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  sfFloatRect arg2 ;
  sfFloatRect *argp2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  argp2 = (sfFloatRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfFloatRect");
  }
  arg2 = (sfFloatRect)*argp2;
  
  
  sfView_setViewport(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfView_reset_graphics_c1a031043095f7b7(sfView *_swig_go_0, sfFloatRect *_swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  sfFloatRect arg2 ;
  sfFloatRect *argp2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  argp2 = (sfFloatRect *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfFloatRect");
  }
  arg2 = (sfFloatRect)*argp2;
  
  
  sfView_reset(arg1,SWIG_STD_MOVE(arg2));
  
}


sfVector2f *_wrap_sfView_getCenter_graphics_c1a031043095f7b7(sfView *_swig_go_0) {
  sfView *arg1 = (sfView *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  result = sfView_getCenter((sfView const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


sfVector2f *_wrap_sfView_getSize_graphics_c1a031043095f7b7(sfView *_swig_go_0) {
  sfView *arg1 = (sfView *) 0 ;
  sfVector2f result;
  sfVector2f *_swig_go_result;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  result = sfView_getSize((sfView const *)arg1);
  *(sfVector2f **)&_swig_go_result = new sfVector2f(result); 
  return _swig_go_result;
}


float _wrap_sfView_getRotation_graphics_c1a031043095f7b7(sfView *_swig_go_0) {
  sfView *arg1 = (sfView *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  result = (float)sfView_getRotation((sfView const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfFloatRect *_wrap_sfView_getViewport_graphics_c1a031043095f7b7(sfView *_swig_go_0) {
  sfView *arg1 = (sfView *) 0 ;
  sfFloatRect result;
  sfFloatRect *_swig_go_result;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  result = sfView_getViewport((sfView const *)arg1);
  *(sfFloatRect **)&_swig_go_result = new sfFloatRect(result); 
  return _swig_go_result;
}


void _wrap_sfView_move_graphics_c1a031043095f7b7(sfView *_swig_go_0, sfVector2f *_swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  sfVector2f arg2 ;
  sfVector2f *argp2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  
  argp2 = (sfVector2f *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null sfVector2f");
  }
  arg2 = (sfVector2f)*argp2;
  
  
  sfView_move(arg1,SWIG_STD_MOVE(arg2));
  
}


void _wrap_sfView_rotate_graphics_c1a031043095f7b7(sfView *_swig_go_0, float _swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  float arg2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfView_rotate(arg1,arg2);
  
}


void _wrap_sfView_zoom_graphics_c1a031043095f7b7(sfView *_swig_go_0, float _swig_go_1) {
  sfView *arg1 = (sfView *) 0 ;
  float arg2 ;
  
  arg1 = *(sfView **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  sfView_zoom(arg1,arg2);
  
}


#ifdef __cplusplus
}
#endif

