/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./interfaces/System.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__system_01e8c9090dade920(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__system_01e8c9090dade920(p);
}



#define SWIG_VERSION 0x040300
#define SWIGGO
#define SWIGMODULE system
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


 /* Includes the header in the wrapper code */
 #include <SFML/System.h>
 
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_system_01e8c9090dade920(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_system_01e8c9090dade920(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_sfFree_system_01e8c9090dade920(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  sfFree(arg1);
  
}


sfBuffer *_wrap_sfBuffer_create_system_01e8c9090dade920() {
  sfBuffer *result = 0 ;
  sfBuffer *_swig_go_result;
  
  
  result = (sfBuffer *)sfBuffer_create();
  *(sfBuffer **)&_swig_go_result = (sfBuffer *)result; 
  return _swig_go_result;
}


void _wrap_sfBuffer_destroy_system_01e8c9090dade920(sfBuffer *_swig_go_0) {
  sfBuffer *arg1 = (sfBuffer *) 0 ;
  
  arg1 = *(sfBuffer **)&_swig_go_0; 
  
  sfBuffer_destroy(arg1);
  
}


long long _wrap_sfBuffer_getSize_system_01e8c9090dade920(sfBuffer *_swig_go_0) {
  sfBuffer *arg1 = (sfBuffer *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(sfBuffer **)&_swig_go_0; 
  
  result = sfBuffer_getSize((sfBuffer const *)arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


char *_wrap_sfBuffer_getData_system_01e8c9090dade920(sfBuffer *_swig_go_0) {
  sfBuffer *arg1 = (sfBuffer *) 0 ;
  sfUint8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(sfBuffer **)&_swig_go_0; 
  
  result = (sfUint8 *)sfBuffer_getData((sfBuffer const *)arg1);
  *(sfUint8 **)&_swig_go_result = (sfUint8 *)result; 
  return _swig_go_result;
}


sfClock *_wrap_sfClock_create_system_01e8c9090dade920() {
  sfClock *result = 0 ;
  sfClock *_swig_go_result;
  
  
  result = (sfClock *)sfClock_create();
  *(sfClock **)&_swig_go_result = (sfClock *)result; 
  return _swig_go_result;
}


sfClock *_wrap_sfClock_copy_system_01e8c9090dade920(sfClock *_swig_go_0) {
  sfClock *arg1 = (sfClock *) 0 ;
  sfClock *result = 0 ;
  sfClock *_swig_go_result;
  
  arg1 = *(sfClock **)&_swig_go_0; 
  
  result = (sfClock *)sfClock_copy((sfClock const *)arg1);
  *(sfClock **)&_swig_go_result = (sfClock *)result; 
  return _swig_go_result;
}


void _wrap_sfClock_destroy_system_01e8c9090dade920(sfClock *_swig_go_0) {
  sfClock *arg1 = (sfClock *) 0 ;
  
  arg1 = *(sfClock **)&_swig_go_0; 
  
  sfClock_destroy(arg1);
  
}


sfTime *_wrap_sfClock_getElapsedTime_system_01e8c9090dade920(sfClock *_swig_go_0) {
  sfClock *arg1 = (sfClock *) 0 ;
  sfTime result;
  sfTime *_swig_go_result;
  
  arg1 = *(sfClock **)&_swig_go_0; 
  
  result = sfClock_getElapsedTime((sfClock const *)arg1);
  *(sfTime **)&_swig_go_result = new sfTime(result); 
  return _swig_go_result;
}


sfTime *_wrap_sfClock_restart_system_01e8c9090dade920(sfClock *_swig_go_0) {
  sfClock *arg1 = (sfClock *) 0 ;
  sfTime result;
  sfTime *_swig_go_result;
  
  arg1 = *(sfClock **)&_swig_go_0; 
  
  result = sfClock_restart(arg1);
  *(sfTime **)&_swig_go_result = new sfTime(result); 
  return _swig_go_result;
}


void _wrap_sfInputStream_read_set_system_01e8c9090dade920(sfInputStream *_swig_go_0, void* _swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamReadFunc arg2 = (sfInputStreamReadFunc) 0 ;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfInputStreamReadFunc *)&_swig_go_1; 
  
  if (arg1) (arg1)->read = arg2;
  
}


void* _wrap_sfInputStream_read_get_system_01e8c9090dade920(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamReadFunc result;
  void* _swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (sfInputStreamReadFunc) ((arg1)->read);
  *(sfInputStreamReadFunc *)&_swig_go_result = (sfInputStreamReadFunc)result; 
  return _swig_go_result;
}


void _wrap_sfInputStream_seek_set_system_01e8c9090dade920(sfInputStream *_swig_go_0, void* _swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamSeekFunc arg2 = (sfInputStreamSeekFunc) 0 ;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfInputStreamSeekFunc *)&_swig_go_1; 
  
  if (arg1) (arg1)->seek = arg2;
  
}


void* _wrap_sfInputStream_seek_get_system_01e8c9090dade920(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamSeekFunc result;
  void* _swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (sfInputStreamSeekFunc) ((arg1)->seek);
  *(sfInputStreamSeekFunc *)&_swig_go_result = (sfInputStreamSeekFunc)result; 
  return _swig_go_result;
}


void _wrap_sfInputStream_tell_set_system_01e8c9090dade920(sfInputStream *_swig_go_0, void* _swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamTellFunc arg2 = (sfInputStreamTellFunc) 0 ;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfInputStreamTellFunc *)&_swig_go_1; 
  
  if (arg1) (arg1)->tell = arg2;
  
}


void* _wrap_sfInputStream_tell_get_system_01e8c9090dade920(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamTellFunc result;
  void* _swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (sfInputStreamTellFunc) ((arg1)->tell);
  *(sfInputStreamTellFunc *)&_swig_go_result = (sfInputStreamTellFunc)result; 
  return _swig_go_result;
}


void _wrap_sfInputStream_getSize_set_system_01e8c9090dade920(sfInputStream *_swig_go_0, void* _swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamGetSizeFunc arg2 = (sfInputStreamGetSizeFunc) 0 ;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(sfInputStreamGetSizeFunc *)&_swig_go_1; 
  
  if (arg1) (arg1)->getSize = arg2;
  
}


void* _wrap_sfInputStream_getSize_get_system_01e8c9090dade920(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  sfInputStreamGetSizeFunc result;
  void* _swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (sfInputStreamGetSizeFunc) ((arg1)->getSize);
  *(sfInputStreamGetSizeFunc *)&_swig_go_result = (sfInputStreamGetSizeFunc)result; 
  return _swig_go_result;
}


void _wrap_sfInputStream_userData_set_system_01e8c9090dade920(sfInputStream *_swig_go_0, void *_swig_go_1) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  
  if (arg1) (arg1)->userData = arg2;
  
}


void *_wrap_sfInputStream_userData_get_system_01e8c9090dade920(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  result = (void *) ((arg1)->userData);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


sfInputStream *_wrap_new_sfInputStream_system_01e8c9090dade920() {
  sfInputStream *result = 0 ;
  sfInputStream *_swig_go_result;
  
  
  result = (sfInputStream *)new sfInputStream();
  *(sfInputStream **)&_swig_go_result = (sfInputStream *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfInputStream_system_01e8c9090dade920(sfInputStream *_swig_go_0) {
  sfInputStream *arg1 = (sfInputStream *) 0 ;
  
  arg1 = *(sfInputStream **)&_swig_go_0; 
  
  delete arg1;
  
}


sfMutex *_wrap_sfMutex_create_system_01e8c9090dade920() {
  sfMutex *result = 0 ;
  sfMutex *_swig_go_result;
  
  
  result = (sfMutex *)sfMutex_create();
  *(sfMutex **)&_swig_go_result = (sfMutex *)result; 
  return _swig_go_result;
}


void _wrap_sfMutex_destroy_system_01e8c9090dade920(sfMutex *_swig_go_0) {
  sfMutex *arg1 = (sfMutex *) 0 ;
  
  arg1 = *(sfMutex **)&_swig_go_0; 
  
  sfMutex_destroy(arg1);
  
}


void _wrap_sfMutex_lock_system_01e8c9090dade920(sfMutex *_swig_go_0) {
  sfMutex *arg1 = (sfMutex *) 0 ;
  
  arg1 = *(sfMutex **)&_swig_go_0; 
  
  sfMutex_lock(arg1);
  
}


void _wrap_sfMutex_unlock_system_01e8c9090dade920(sfMutex *_swig_go_0) {
  sfMutex *arg1 = (sfMutex *) 0 ;
  
  arg1 = *(sfMutex **)&_swig_go_0; 
  
  sfMutex_unlock(arg1);
  
}


void _wrap_sfSleep_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime arg1 ;
  sfTime *argp1 ;
  
  
  argp1 = (sfTime *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfTime");
  }
  arg1 = (sfTime)*argp1;
  
  
  sfSleep(SWIG_STD_MOVE(arg1));
  
}


sfThread *_wrap_sfThread_create_system_01e8c9090dade920(void* _swig_go_0, void *_swig_go_1) {
  void (*arg1)(void *) = (void (*)(void *)) 0 ;
  void *arg2 = (void *) 0 ;
  sfThread *result = 0 ;
  sfThread *_swig_go_result;
  
  arg1 = *(void (**)(void *))&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  
  result = (sfThread *)sfThread_create(arg1,arg2);
  *(sfThread **)&_swig_go_result = (sfThread *)result; 
  return _swig_go_result;
}


void _wrap_sfThread_destroy_system_01e8c9090dade920(sfThread *_swig_go_0) {
  sfThread *arg1 = (sfThread *) 0 ;
  
  arg1 = *(sfThread **)&_swig_go_0; 
  
  sfThread_destroy(arg1);
  
}


void _wrap_sfThread_launch_system_01e8c9090dade920(sfThread *_swig_go_0) {
  sfThread *arg1 = (sfThread *) 0 ;
  
  arg1 = *(sfThread **)&_swig_go_0; 
  
  sfThread_launch(arg1);
  
}


void _wrap_sfThread_wait_system_01e8c9090dade920(sfThread *_swig_go_0) {
  sfThread *arg1 = (sfThread *) 0 ;
  
  arg1 = *(sfThread **)&_swig_go_0; 
  
  sfThread_wait(arg1);
  
}


void _wrap_sfThread_terminate_system_01e8c9090dade920(sfThread *_swig_go_0) {
  sfThread *arg1 = (sfThread *) 0 ;
  
  arg1 = *(sfThread **)&_swig_go_0; 
  
  sfThread_terminate(arg1);
  
}


void _wrap_sfTime_microseconds_set_system_01e8c9090dade920(sfTime *_swig_go_0, long long _swig_go_1) {
  sfTime *arg1 = (sfTime *) 0 ;
  sfInt64 arg2 ;
  
  arg1 = *(sfTime **)&_swig_go_0; 
  arg2 = (sfInt64)_swig_go_1; 
  
  if (arg1) (arg1)->microseconds = arg2;
  
}


long long _wrap_sfTime_microseconds_get_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime *arg1 = (sfTime *) 0 ;
  sfInt64 result;
  long long _swig_go_result;
  
  arg1 = *(sfTime **)&_swig_go_0; 
  
  result = (sfInt64) ((arg1)->microseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfTime *_wrap_new_sfTime_system_01e8c9090dade920() {
  sfTime *result = 0 ;
  sfTime *_swig_go_result;
  
  
  result = (sfTime *)new sfTime();
  *(sfTime **)&_swig_go_result = (sfTime *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfTime_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime *arg1 = (sfTime *) 0 ;
  
  arg1 = *(sfTime **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfTime_Zero_set_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime *arg1 = (sfTime *) 0 ;
  
  arg1 = *(sfTime **)&_swig_go_0; 
  
  sfTime_Zero = *arg1;
  
}


sfTime *_wrap_sfTime_Zero_get_system_01e8c9090dade920() {
  sfTime *result = 0 ;
  sfTime *_swig_go_result;
  
  
  result = (sfTime *)&sfTime_Zero;
  *(sfTime **)&_swig_go_result = (sfTime *)result; 
  return _swig_go_result;
}


float _wrap_sfTime_asSeconds_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime arg1 ;
  sfTime *argp1 ;
  float result;
  float _swig_go_result;
  
  
  argp1 = (sfTime *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfTime");
  }
  arg1 = (sfTime)*argp1;
  
  
  result = (float)sfTime_asSeconds(SWIG_STD_MOVE(arg1));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_sfTime_asMilliseconds_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime arg1 ;
  sfTime *argp1 ;
  sfInt32 result;
  intgo _swig_go_result;
  
  
  argp1 = (sfTime *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfTime");
  }
  arg1 = (sfTime)*argp1;
  
  
  result = (sfInt32)sfTime_asMilliseconds(SWIG_STD_MOVE(arg1));
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_sfTime_asMicroseconds_system_01e8c9090dade920(sfTime *_swig_go_0) {
  sfTime arg1 ;
  sfTime *argp1 ;
  sfInt64 result;
  long long _swig_go_result;
  
  
  argp1 = (sfTime *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null sfTime");
  }
  arg1 = (sfTime)*argp1;
  
  
  result = (sfInt64)sfTime_asMicroseconds(SWIG_STD_MOVE(arg1));
  _swig_go_result = result; 
  return _swig_go_result;
}


sfTime *_wrap_sfSeconds_system_01e8c9090dade920(float _swig_go_0) {
  float arg1 ;
  sfTime result;
  sfTime *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  
  result = sfSeconds(arg1);
  *(sfTime **)&_swig_go_result = new sfTime(result); 
  return _swig_go_result;
}


sfTime *_wrap_sfMilliseconds_system_01e8c9090dade920(intgo _swig_go_0) {
  sfInt32 arg1 ;
  sfTime result;
  sfTime *_swig_go_result;
  
  arg1 = (sfInt32)_swig_go_0; 
  
  result = sfMilliseconds(arg1);
  *(sfTime **)&_swig_go_result = new sfTime(result); 
  return _swig_go_result;
}


sfTime *_wrap_sfMicroseconds_system_01e8c9090dade920(long long _swig_go_0) {
  sfInt64 arg1 ;
  sfTime result;
  sfTime *_swig_go_result;
  
  arg1 = (sfInt64)_swig_go_0; 
  
  result = sfMicroseconds(arg1);
  *(sfTime **)&_swig_go_result = new sfTime(result); 
  return _swig_go_result;
}


void _wrap_sfVector2i_x_set_system_01e8c9090dade920(sfVector2i *_swig_go_0, intgo _swig_go_1) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int arg2 ;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfVector2i_x_get_system_01e8c9090dade920(sfVector2i *_swig_go_0) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  
  result = (int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector2i_y_set_system_01e8c9090dade920(sfVector2i *_swig_go_0, intgo _swig_go_1) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int arg2 ;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfVector2i_y_get_system_01e8c9090dade920(sfVector2i *_swig_go_0) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  
  result = (int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2i *_wrap_new_sfVector2i_system_01e8c9090dade920() {
  sfVector2i *result = 0 ;
  sfVector2i *_swig_go_result;
  
  
  result = (sfVector2i *)new sfVector2i();
  *(sfVector2i **)&_swig_go_result = (sfVector2i *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector2i_system_01e8c9090dade920(sfVector2i *_swig_go_0) {
  sfVector2i *arg1 = (sfVector2i *) 0 ;
  
  arg1 = *(sfVector2i **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfVector2u_x_set_system_01e8c9090dade920(sfVector2u *_swig_go_0, intgo _swig_go_1) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_sfVector2u_x_get_system_01e8c9090dade920(sfVector2u *_swig_go_0) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector2u_y_set_system_01e8c9090dade920(sfVector2u *_swig_go_0, intgo _swig_go_1) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_sfVector2u_y_get_system_01e8c9090dade920(sfVector2u *_swig_go_0) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2u *_wrap_new_sfVector2u_system_01e8c9090dade920() {
  sfVector2u *result = 0 ;
  sfVector2u *_swig_go_result;
  
  
  result = (sfVector2u *)new sfVector2u();
  *(sfVector2u **)&_swig_go_result = (sfVector2u *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector2u_system_01e8c9090dade920(sfVector2u *_swig_go_0) {
  sfVector2u *arg1 = (sfVector2u *) 0 ;
  
  arg1 = *(sfVector2u **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfVector2f_x_set_system_01e8c9090dade920(sfVector2f *_swig_go_0, float _swig_go_1) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_sfVector2f_x_get_system_01e8c9090dade920(sfVector2f *_swig_go_0) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector2f_y_set_system_01e8c9090dade920(sfVector2f *_swig_go_0, float _swig_go_1) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_sfVector2f_y_get_system_01e8c9090dade920(sfVector2f *_swig_go_0) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector2f *_wrap_new_sfVector2f_system_01e8c9090dade920() {
  sfVector2f *result = 0 ;
  sfVector2f *_swig_go_result;
  
  
  result = (sfVector2f *)new sfVector2f();
  *(sfVector2f **)&_swig_go_result = (sfVector2f *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector2f_system_01e8c9090dade920(sfVector2f *_swig_go_0) {
  sfVector2f *arg1 = (sfVector2f *) 0 ;
  
  arg1 = *(sfVector2f **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_sfVector3f_x_set_system_01e8c9090dade920(sfVector3f *_swig_go_0, float _swig_go_1) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


float _wrap_sfVector3f_x_get_system_01e8c9090dade920(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  result = (float) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector3f_y_set_system_01e8c9090dade920(sfVector3f *_swig_go_0, float _swig_go_1) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


float _wrap_sfVector3f_y_get_system_01e8c9090dade920(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  result = (float) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_sfVector3f_z_set_system_01e8c9090dade920(sfVector3f *_swig_go_0, float _swig_go_1) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float arg2 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->z = arg2;
  
}


float _wrap_sfVector3f_z_get_system_01e8c9090dade920(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  result = (float) ((arg1)->z);
  _swig_go_result = result; 
  return _swig_go_result;
}


sfVector3f *_wrap_new_sfVector3f_system_01e8c9090dade920() {
  sfVector3f *result = 0 ;
  sfVector3f *_swig_go_result;
  
  
  result = (sfVector3f *)new sfVector3f();
  *(sfVector3f **)&_swig_go_result = (sfVector3f *)result; 
  return _swig_go_result;
}


void _wrap_delete_sfVector3f_system_01e8c9090dade920(sfVector3f *_swig_go_0) {
  sfVector3f *arg1 = (sfVector3f *) 0 ;
  
  arg1 = *(sfVector3f **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

